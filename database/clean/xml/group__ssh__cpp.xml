<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__ssh__cpp" kind="group">
    <compoundname>ssh_cpp</compoundname>
    <title>The libssh C++ wrapper</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ssh__cpp_1gaac932f504b4caca5f0da77f9e474e147" prot="public" static="no">
        <name>LIBSSH_LEGACY_0_4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/libsshpp.hpp" line="52" column="9" bodyfile="include/libssh/libsshpp.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The C++ bindings for libssh are completely embedded in a single .hpp file, and this for two reasons:<itemizedlist>
<listitem><para>C++ is hard to keep binary compatible, C is easy. We try to keep libssh C version as much as possible binary compatible between releases, while this would be hard for C++. If you compile your program with these headers, you will only link to the C version of libssh which will be kept ABI compatible. No need to recompile your C++ program each time a new binary-compatible version of libssh is out</para>
</listitem><listitem><para>Most of the functions in this file are really short and are probably worth the &quot;inline&quot; linking mode, which the compiler can decide to do in some case. There would be nearly no performance penalty of using the wrapper rather than native calls.</para>
</listitem></itemizedlist>
</para>
<para>Please visit the documentation of <ref refid="classssh_1_1Session" kindref="compound">ssh::Session</ref> and <ref refid="classssh_1_1Channel" kindref="compound">ssh::Channel</ref> <simplesect kind="see"><para><ref refid="classssh_1_1Session" kindref="compound">ssh::Session</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classssh_1_1Channel" kindref="compound">ssh::Channel</ref></para>
</simplesect>
If you wish not to use C++ exceptions, please define SSH_NO_CPP_EXCEPTIONS: <programlisting><codeline><highlight class="normal">#define<sp/>SSH_NO_CPP_EXCEPTIONS</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;libssh/libsshpp.hpp&gt;</highlight></codeline>
</programlisting> All functions will then return SSH_ERROR in case of error. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
