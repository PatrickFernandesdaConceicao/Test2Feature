<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__libssh__misc" kind="group">
    <compoundname>libssh_misc</compoundname>
    <title>The SSH helper functions.</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__misc_1gad6effc9fcc3529ae5d7301fb096aa71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_getpass</definition>
        <argsstring>(const char *prompt, char *buf, size_t len, int echo, int verify)</argsstring>
        <name>ssh_getpass</name>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>echo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
<para>Get a password from the console. </para>
        </briefdescription>
        <detaileddescription>
<para>You should make sure that the buffer is an empty string!</para>
<para>You can also use this function to ask for a username. Then you can fill the buffer with the username and it is shows to the users. If the users just presses enter the buffer will be untouched.</para>
<para><programlisting><codeline><highlight class="normal">char<sp/>username[128];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">snprintf(username,<sp/>sizeof(username),<sp/>&quot;john&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ssh_getpass(&quot;Username:&quot;,<sp/>username,<sp/>sizeof(username),<sp/>1,<sp/>0);</highlight></codeline>
</programlisting></para>
<para>The prompt will look like this:</para>
<para>Username: [john]</para>
<para>If you press enter then john is used as the username, or you can type it in to change it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>The prompt to show to ask for the password.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer the password should be stored. It NEEDS to be empty or filled out.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">echo</parametername>
</parameternamelist>
<parameterdescription>
<para>Should we echo what you type.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">verify</parametername>
</parameternamelist>
<parameterdescription>
<para>Should we ask for the password twice.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/getpass.c" line="212" column="5" bodyfile="src/getpass.c" bodystart="212" bodyend="282"/>
        <references refid="samplesshd-kbdint_8c_1aed50069385b2de326e5bbed79b19affd" compoundref="samplesshd-kbdint_8c" startline="189">echo</references>
        <references refid="group__libssh__misc_1ga51869b401cb0f3e711527bc9a730fbff" compoundref="misc_8c" startline="1461" endline="1474">explicit_bzero</references>
        <references refid="getpass_8c_1ac691c8e41a2312ee5d6f383129a49150" compoundref="getpass_8c" startline="47" endline="115">ssh_gets</references>
        <references refid="examples__common_8h_1a01c647179ba7270ccbc9a5253846b3d2" compoundref="examples__common_8h" startline="19">ZERO_STRUCT</references>
        <referencedby refid="ssh__client_8c_1a3bcf6ffc0c2c09238e1a7bc6f65aff7c" compoundref="ssh__client_8c" startline="56" endline="67">auth_callback</referencedby>
        <referencedby refid="examples_2authentication_8c_1a442e0c31c0c57f60ec1f5eaaceebf436" compoundref="examples_2authentication_8c" startline="141" endline="241">authenticate_console</referencedby>
        <referencedby refid="examples_2authentication_8c_1a358ed06284cff4e8ee596d31238e5731" compoundref="examples_2authentication_8c" startline="27" endline="101">authenticate_kbdint</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga894753441a2150b0599fdb283bf02c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_user_home_dir</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_get_user_home_dir</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="241" column="6" bodyfile="src/misc.c" bodystart="241" bodyend="263"/>
        <references refid="group__libssh__misc_1ga89cd34ceafacdb777878d4bf68da7a7e" compoundref="misc_8c" startline="238">NSS_BUFLEN_PASSWD</references>
        <references refid="pkd__daemon_8c_1ac6509c6fe4cbf7bde170597172f8a288" compoundref="pkd__daemon_8c" startline="62">rc</references>
        <referencedby refid="group__libssh__misc_1ga85622306848fd7e735d5843747f6eb28" compoundref="misc_8c" startline="1037" endline="1093">ssh_path_expand_tilde</referencedby>
        <referencedby refid="torture__misc_8c_1a922d7a84a8642e8858d92b0b68ec2599" compoundref="torture__misc_8c" startline="39" endline="54">torture_get_user_home_dir</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga8077c07f3f7ca5bc62ac7ba807f30476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_file_readaccess_ok</definition>
        <argsstring>(const char *file)</argsstring>
        <name>ssh_file_readaccess_ok</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="266" column="5" bodyfile="src/misc.c" bodystart="266" bodyend="273"/>
        <referencedby refid="legacy_8h_1a95d74e70186ea1e485de70f75ba7bf5c" compoundref="legacy_8c" startline="643" endline="706">ssh_try_publickey_from_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaecdd455fe4f0feb2781ffddf179f38ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_dir_writeable</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ssh_dir_writeable</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Check if the given path is an existing directory and that is accessible for writing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the directory to be checked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 1 if the directory exists and is accessible; 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="283" column="5" bodyfile="src/misc.c" bodystart="283" bodyend="298"/>
        <references refid="benchmarks_8c_1aff2566f4c366b48d73479bef43ee4d2e" compoundref="benchmarks_8c" startline="347">buffer</references>
        <references refid="pkd__daemon_8c_1ac6509c6fe4cbf7bde170597172f8a288" compoundref="pkd__daemon_8c" startline="62">rc</references>
        <referencedby refid="torture__misc_8c_1a181933ed646695542ff693fb5546964f" compoundref="torture__misc_8c" startline="367" endline="410">torture_ssh_dir_writeable</referencedby>
        <referencedby refid="torture__misc_8c_1a3fc4093e1bd00dbd7dedd1abd5f0c258" compoundref="torture__misc_8c" startline="412" endline="502">torture_ssh_mkdirs</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaa9b6cc5a03233cde110bc394a9cc1a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_local_username</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_get_local_username</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="300" column="6" bodyfile="src/misc.c" bodystart="300" bodyend="320"/>
        <references refid="samplesshd-kbdint_8c_1a8f8f80d37794cde9472343e4487ba3eb" compoundref="samplesshd-kbdint_8c" startline="186">name</references>
        <references refid="group__libssh__misc_1ga89cd34ceafacdb777878d4bf68da7a7e" compoundref="misc_8c" startline="238">NSS_BUFLEN_PASSWD</references>
        <references refid="pkd__daemon_8c_1ac6509c6fe4cbf7bde170597172f8a288" compoundref="pkd__daemon_8c" startline="62">rc</references>
        <referencedby refid="config_8c_1a45c85072922b6f53ea96012589d601db" compoundref="config_8c" startline="508" endline="1134">ssh_config_parse_line</referencedby>
        <referencedby refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="474" endline="1039">ssh_options_set</referencedby>
        <referencedby refid="group__libssh__misc_1gabee03cec7d5ba668885bd1a47e9650ea" compoundref="misc_8c" startline="1106" endline="1207">ssh_path_expand_escape</referencedby>
        <referencedby refid="group__libssh__pki_1ga576cb3a5c7f40a0e20a88b14a023613d" compoundref="pki_8c" startline="2086" endline="2142">ssh_pki_export_pubkey_file</referencedby>
        <referencedby refid="legacy_8h_1aa4de432e122c76302e4190041fee6945" compoundref="legacy_8c" startline="575" endline="641">ssh_publickey_to_file</referencedby>
        <referencedby refid="torture__config_8c_1afbd8ffc0723658bbf9cf2d88380ddf0e" compoundref="torture__config_8c" startline="442" endline="647">torture_config_match</referencedby>
        <referencedby refid="torture__options_8c_1a13de9d3bc9ffd89bee5b9d84404bf63b" compoundref="torture__options_8c" startline="572" endline="737">torture_options_config_match</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga6b7c4da7c95d8122de1d4f9c12d1a809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_ipaddr_v4</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ssh_is_ipaddr_v4</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="322" column="5" bodyfile="src/misc.c" bodystart="322" bodyend="332"/>
        <references refid="pkd__daemon_8c_1ac6509c6fe4cbf7bde170597172f8a288" compoundref="pkd__daemon_8c" startline="62">rc</references>
        <referencedby refid="group__libssh__misc_1ga1c673445ca02a6f30ba5940682b5e7ba" compoundref="misc_8c" startline="334" endline="348">ssh_is_ipaddr</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga1c673445ca02a6f30ba5940682b5e7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_ipaddr</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ssh_is_ipaddr</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="334" column="5" bodyfile="src/misc.c" bodystart="334" bodyend="348"/>
        <references refid="pkd__daemon_8c_1ac6509c6fe4cbf7bde170597172f8a288" compoundref="pkd__daemon_8c" startline="62">rc</references>
        <references refid="group__libssh__misc_1ga6b7c4da7c95d8122de1d4f9c12d1a809" compoundref="misc_8c" startline="322" endline="332">ssh_is_ipaddr_v4</references>
        <referencedby refid="connect_8c_1af29ed5be889a5c2ecf972f5ae6203ef3" compoundref="connect_8c" startline="114" endline="143">getai</referencedby>
        <referencedby refid="torture__isipaddr_8c_1a755624656a1547719ea4f93f9f2d0cf0" compoundref="torture__isipaddr_8c" startline="13" endline="53">torture_ssh_is_ipaddr</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga88c3547781e8d80983e1ad1fe3cb70ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_lowercase</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ssh_lowercase</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="352" column="6" bodyfile="src/misc.c" bodystart="352" bodyend="369"/>
        <referencedby refid="config_8c_1a45c85072922b6f53ea96012589d601db" compoundref="config_8c" startline="508" endline="1134">ssh_config_parse_line</referencedby>
        <referencedby refid="group__libssh__session_1ga16eb5c500a1beaf18821c6ce51b7b965" compoundref="known__hosts_8c" startline="430" endline="493">ssh_dump_knownhost</referencedby>
        <referencedby refid="group__libssh__session_1ga6f37e3d7bb6b938b44d6a34a76fdfa0b" compoundref="known__hosts_8c" startline="288" endline="424">ssh_is_server_known</referencedby>
        <referencedby refid="group__libssh__session_1gae8571ad5d4a9490badba8606e9942ec2" compoundref="src_2knownhosts_8c" startline="302" endline="334">ssh_session_get_host_port</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaa8ec4fa8a47283d9a7fd8920e84f8fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_hostport</definition>
        <argsstring>(const char *host, int port)</argsstring>
        <name>ssh_hostport</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="371" column="6" bodyfile="src/misc.c" bodystart="371" bodyend="389"/>
        <references refid="sshnetcat_8c_1a1c2046dcb30a629d6d9f45ff8f403f12" compoundref="sshnetcat_8c" startline="37">host</references>
        <references refid="sshnetcat_8c_1ad723da1801ae1586eb330380e2d9a912" compoundref="sshnetcat_8c" startline="39">port</references>
        <referencedby refid="group__libssh__session_1ga16eb5c500a1beaf18821c6ce51b7b965" compoundref="known__hosts_8c" startline="430" endline="493">ssh_dump_knownhost</referencedby>
        <referencedby refid="group__libssh__session_1ga6f37e3d7bb6b938b44d6a34a76fdfa0b" compoundref="known__hosts_8c" startline="288" endline="424">ssh_is_server_known</referencedby>
        <referencedby refid="group__libssh__session_1gaa3a37302850d0467f19db4eba5257d3d" compoundref="src_2knownhosts_8c" startline="612" endline="765">ssh_known_hosts_parse_line</referencedby>
        <referencedby refid="group__libssh__session_1gae8571ad5d4a9490badba8606e9942ec2" compoundref="src_2knownhosts_8c" startline="302" endline="334">ssh_session_get_host_port</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga6ebcfc53884fdc5afb1607c94f8007d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_hexa</definition>
        <argsstring>(const unsigned char *what, size_t len)</argsstring>
        <name>ssh_get_hexa</name>
        <param>
          <type>const unsigned char *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Convert a buffer into a colon separated hex string. The caller has to free the memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>What should be converted to a hex string.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hex string or NULL on error.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__string_1gafc10700722d6cafc468c2ee97585449a" kindref="member">ssh_string_free_char()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="403" column="6" bodyfile="src/misc.c" bodystart="403" bodyend="426"/>
        <referencedby refid="group__libssh__session_1ga775072dc331a11b575957fe23fdd311b" compoundref="dh_8c" startline="716" endline="770">ssh_get_fingerprint_hash</referencedby>
        <referencedby refid="gssapi_8c_1a86debe4d1a889bed051ceb9ae8487bdb" compoundref="gssapi_8c" startline="638" endline="705">ssh_gssapi_match</referencedby>
        <referencedby refid="gssapi_8h_1ad5e9c28976be3baa0bc877c3dba53571" compoundref="gssapi_8c" startline="836" endline="903">SSH_PACKET_CALLBACK</referencedby>
        <referencedby refid="group__libssh__misc_1ga39bf7936ed51361fe9cf3c3bbfc25514" compoundref="misc_8c" startline="431" endline="440">ssh_print_hexa</referencedby>
        <referencedby refid="torture__hashes_8c_1aa4c244cbfaefd1313f9875c4e137c4a0" compoundref="torture__hashes_8c" startline="52" endline="79">torture_md5_hash</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga39bf7936ed51361fe9cf3c3bbfc25514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_print_hexa</definition>
        <argsstring>(const char *descr, const unsigned char *what, size_t len)</argsstring>
        <name>ssh_print_hexa</name>
        <param>
          <type>const char *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please use <ref refid="group__libssh__session_1ga93e85883ddac5198ed590e36eef4dc3b" kindref="member">ssh_print_hash()</ref> instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="431" column="6" bodyfile="src/misc.c" bodystart="431" bodyend="440"/>
        <references refid="group__libssh__misc_1ga6ebcfc53884fdc5afb1607c94f8007d4" compoundref="misc_8c" startline="403" endline="426">ssh_get_hexa</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga2f4f479e4dc3412c7b4af6946eef6269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_log_hexdump</definition>
        <argsstring>(const char *descr, const unsigned char *what, size_t len)</argsstring>
        <name>ssh_log_hexdump</name>
        <param>
          <type>const char *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Log the content of a buffer in hexadecimal format, similar to the output of &apos;hexdump -C&apos; command. </para>
        </briefdescription>
        <detaileddescription>
<para>The first logged line is the given description followed by the length. Then the content of the buffer is logged 16 bytes per line in the following format:</para>
<para>(offset) (first 8 bytes) (last 8 bytes) (the 16 bytes as ASCII char values)</para>
<para>The output for a 16 bytes array containing values from 0x00 to 0x0f would be:</para>
<para>&quot;Example (16 bytes):&quot; &quot;  00000000  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ................&quot;</para>
<para>The value for each byte as corresponding ASCII character is printed at the end if the value is printable. Otherwise it is replace with &apos;.&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">descr</parametername>
</parameternamelist>
<parameterdescription>
<para>A description for the content to be logged </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">what</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to be logged </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer given in what</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If a too long description is provided (which would result in a first line longer than 80 bytes), the function will fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="467" column="6" bodyfile="src/misc.c" bodystart="467" bodyend="627"/>
        <references refid="benchmarks_8c_1aff2566f4c366b48d73479bef43ee4d2e" compoundref="benchmarks_8c" startline="347">buffer</references>
        <references refid="proxy_8c_1a11614f44ef4d939bdd984953346a7572" compoundref="proxy_8c" startline="33">error</references>
        <references refid="priv_8h_1aa21fd8a7a609329603b7b16da7939fca" compoundref="priv_8h" startline="240">SSH_LOG</references>
        <references refid="libssh_8h_1a5e4247396f11fdc228d356a408c81715" compoundref="libssh_8h" startline="374">SSH_LOG_DEBUG</references>
        <references refid="libssh_8h_1ab3c2f1accd58d32987f02d8aebdc1fc4" compoundref="libssh_8h" startline="370">SSH_LOG_WARN</references>
        <referencedby refid="chachapoly_8c_1ae75b191280c1f77328d7a72f3721dd88" compoundref="chachapoly_8c" startline="133" endline="180">chacha20_poly1305_aead_decrypt</referencedby>
        <referencedby refid="group__libssh__pki_1ga12fb8e3141837c332165568530a1d29a" compoundref="pki_8c" startline="1100" endline="1278">pki_import_privkey_buffer</referencedby>
        <referencedby refid="group__libssh__pki_1ga47e989e47acf6d577c805910e688a21f" compoundref="pki_8c" startline="1280" endline="1458">pki_import_pubkey_buffer</referencedby>
        <referencedby refid="pki__priv_8h_1a9d88e1b6e93f81dc11ebded5384646e3" compoundref="pki__crypto_8c" startline="2139" endline="2279">pki_sign_data</referencedby>
        <referencedby refid="pki__crypto_8c_1a0f1df403c735a5e15982a028f1540024" compoundref="pki__crypto_8c" startline="1656" endline="1773">pki_signature_from_dsa_blob</referencedby>
        <referencedby refid="pki__crypto_8c_1ae3a66a820cd45b733f5ff75f898a0f33" compoundref="pki__crypto_8c" startline="1775" endline="1911">pki_signature_from_ecdsa_blob</referencedby>
        <referencedby refid="pki__crypto_8c_1ad2beac840c71e6ffb9c0dfede0704905" compoundref="pki__crypto_8c" startline="1587" endline="1654">pki_signature_from_rsa_blob</referencedby>
        <referencedby refid="dh_8h_1ad90769620d45d2750b3ab7844edd4996" compoundref="dh__crypto_8c" startline="44" endline="63">ssh_dh_debug_crypto</referencedby>
        <referencedby refid="kex_8h_1ad66e7a0891466620e0722fe19aaff9f8" compoundref="kex_8c" startline="1281" endline="1411">ssh_generate_session_keys</referencedby>
        <referencedby refid="kex_8h_1a0e79dc09bff165cdc194d729c96d4e0d" compoundref="kex_8c" startline="545" endline="559">ssh_list_kex</referencedby>
        <referencedby refid="kex_8h_1aa65d23af384112419a2f13f5b7f2d9ea" compoundref="kex_8c" startline="946" endline="1213">ssh_make_sessionid</referencedby>
        <referencedby refid="packet__crypt_8c_1abdf83dcec86ab5fce6c237e3f1622788" compoundref="packet__crypt_8c" startline="133" endline="213">ssh_packet_encrypt</referencedby>
        <referencedby refid="packet__crypt_8c_1a68ff2cd30fefc2798aa57c0bba880235" compoundref="packet__crypt_8c" startline="239" endline="283">ssh_packet_hmac_verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaeda71ed34a62fa332762f25b14dac6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_version</definition>
        <argsstring>(int req_version)</argsstring>
        <name>ssh_version</name>
        <param>
          <type>int</type>
          <declname>req_version</declname>
        </param>
        <briefdescription>
<para>Check if libssh is the required version or get the version string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">req_version</parametername>
</parameternamelist>
<parameterdescription>
<para>The version required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the version of libssh is newer than the version required it will return a version string. NULL if the version is older.</para>
</simplesect>
Example:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(ssh_version(SSH_VERSION_INT(0,2,1))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/>&quot;libssh<sp/>version<sp/>is<sp/>too<sp/>old!\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>exit(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(debug)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;libssh<sp/>%s\n&quot;,<sp/>ssh_version(0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="652" column="12" bodyfile="src/misc.c" bodystart="652" bodyend="659"/>
        <references refid="misc_8c_1ac3b5aed07b4f7c3050ef2bb0882e16c3" compoundref="misc_8c" startline="82">CRYPTO_STRING</references>
        <references refid="misc_8c_1a29135c31bc1a30437276a5daf2439ec5" compoundref="misc_8c" startline="76">GCRYPT_STRING</references>
        <references refid="libssh_8h_1ae62377c24279c9870c0893bd845c7636" compoundref="libssh_8h" startline="87">LIBSSH_VERSION</references>
        <references refid="libssh_8h_1a2cd99e8e8653b889188dc7b84b331dd1" compoundref="libssh_8h" startline="84">LIBSSH_VERSION_INT</references>
        <references refid="misc_8c_1a4fd95b9791fb1bfc3c6e0abb997554a7" compoundref="misc_8c" startline="88">MBED_STRING</references>
        <references refid="libssh_8h_1a9ed5c4abd116001eb5ffedc39bf1f677" compoundref="libssh_8h" startline="71">SSH_STRINGIFY</references>
        <references refid="misc_8c_1a6a4dcaf84799f05b3b9ff2183c5fdcb8" compoundref="misc_8c" startline="94">ZLIB_STRING</references>
        <referencedby refid="libssh__scp_8c_1ac5592690ed68c541b9ccea83fc008d27" compoundref="libssh__scp_8c" startline="45">usage</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga4c696e6fd38257737962971fa0362435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
        <definition>struct ssh_list* ssh_list_new</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_list_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="661" column="15" bodyfile="src/misc.c" bodystart="661" bodyend="667"/>
        <references refid="structssh__list_1adfd591e8780c0e9039dc181579a54946" compoundref="misc_8h" startline="41">ssh_list::end</references>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <referencedby refid="callbacks_8c_1ad2b3310e2c1a9718912b3928c5fb76ef" compoundref="callbacks_8c" startline="70" endline="102">ssh_add_set_channel_callbacks</referencedby>
        <referencedby refid="group__libssh__channel_1gada8ccda7bf65165fe145d3096a252dcc" compoundref="channels_8c" startline="80" endline="129">ssh_channel_new</referencedby>
        <referencedby refid="group__libssh__poll_1ga406895f99b6b486c4b65536e5399ff96" compoundref="poll_8c" startline="760" endline="785">ssh_event_new</referencedby>
        <referencedby refid="group__libssh__session_1ga95043df5a4378cc43ed13ba7ac5b4d01" compoundref="src_2knownhosts_8c" startline="347" endline="453">ssh_known_hosts_get_algorithms</referencedby>
        <referencedby refid="group__libssh__session_1ga4590766bedc2bf9a9f9727b3fac4eaa8" compoundref="src_2knownhosts_8c" startline="215" endline="300">ssh_known_hosts_read_entries</referencedby>
        <referencedby refid="group__libssh__messages_1ga8e536b6f1c824b7ca43d0e8f954b3bd4" compoundref="messages_8c" startline="516" endline="534">ssh_message_get</referencedby>
        <referencedby refid="group__libssh__messages_1ga3b2c6d96a4e786d11db737193b5701a2" compoundref="messages_8c" startline="415" endline="469">ssh_message_queue</referencedby>
        <referencedby refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" compoundref="session_8c" startline="59" endline="181">ssh_new</referencedby>
        <referencedby refid="packet_8h_1a6799ed6886c75279d61dcacd83b71102" compoundref="packet_8c" startline="1426" endline="1433">ssh_packet_set_callbacks</referencedby>
        <referencedby refid="torture__callbacks_8c_1abaf15b9caaac997af2eeed22979cc0b5" compoundref="torture__callbacks_8c" startline="123" endline="190">torture_callbacks_execute_list</referencedby>
        <referencedby refid="torture__callbacks_8c_1af52882982a73ee96fc4f37bd1372c3e3" compoundref="torture__callbacks_8c" startline="200" endline="242">torture_callbacks_iterate</referencedby>
        <referencedby refid="torture__list_8c_1ad4ca16c96399e75780cc4b9358c4efa5" compoundref="torture__list_8c" startline="25" endline="70">torture_ssh_list_append</referencedby>
        <referencedby refid="torture__list_8c_1a99be327c647edf7744eba2f015d61d40" compoundref="torture__list_8c" startline="9" endline="23">torture_ssh_list_new</referencedby>
        <referencedby refid="torture__list_8c_1aa5608b60aa020f0d2f188594c7e189a2" compoundref="torture__list_8c" startline="72" endline="116">torture_ssh_list_prepend</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga069155e0b5924eb930022b8d566f6d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_list_free</definition>
        <argsstring>(struct ssh_list *list)</argsstring>
        <name>ssh_list_free</name>
        <param>
          <type>struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="669" column="6" bodyfile="src/misc.c" bodystart="669" bodyend="680"/>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <references refid="sshd__direct-tcpip_8c_1aed3129b7674034c979192bcca6b0ad8c" compoundref="sshd__direct-tcpip_8c" startline="36">SAFE_FREE</references>
        <referencedby refid="group__libssh__channel_1ga1e7211251562c5e1ec64647236caa745" compoundref="channels_8c" startline="1174" endline="1194">ssh_channel_do_free</referencedby>
        <referencedby refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" compoundref="client_8c" startline="672" endline="750">ssh_disconnect</referencedby>
        <referencedby refid="group__libssh__poll_1ga101388903c74d53ed550574b587449cd" compoundref="poll_8c" startline="1089" endline="1118">ssh_event_free</referencedby>
        <referencedby refid="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" compoundref="session_8c" startline="191" endline="326">ssh_free</referencedby>
        <referencedby refid="group__libssh__session_1ga95043df5a4378cc43ed13ba7ac5b4d01" compoundref="src_2knownhosts_8c" startline="347" endline="453">ssh_known_hosts_get_algorithms</referencedby>
        <referencedby refid="group__libssh__session_1gad36769864e0a5247edffd6e428e34e8a" compoundref="src_2knownhosts_8c" startline="504" endline="593">ssh_known_hosts_get_algorithms_names</referencedby>
        <referencedby refid="torture__callbacks_8c_1abaf15b9caaac997af2eeed22979cc0b5" compoundref="torture__callbacks_8c" startline="123" endline="190">torture_callbacks_execute_list</referencedby>
        <referencedby refid="torture__callbacks_8c_1af52882982a73ee96fc4f37bd1372c3e3" compoundref="torture__callbacks_8c" startline="200" endline="242">torture_callbacks_iterate</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1a440a79f135a76bbdc5cd40590ec30765" compoundref="torture__knownhosts__verify_8c" startline="216" endline="270">torture_knownhosts_duplicate</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1ac1c0973d318a3572507db80d43277613" compoundref="torture__knownhosts__verify_8c" startline="146" endline="214">torture_knownhosts_precheck</referencedby>
        <referencedby refid="torture__knownhosts__parsing_8c_1a0a467c6124a654c7fe393521c3cb13fc" compoundref="torture__knownhosts__parsing_8c" startline="329" endline="372">torture_knownhosts_read_file</referencedby>
        <referencedby refid="torture__list_8c_1ad4ca16c96399e75780cc4b9358c4efa5" compoundref="torture__list_8c" startline="25" endline="70">torture_ssh_list_append</referencedby>
        <referencedby refid="torture__list_8c_1a99be327c647edf7744eba2f015d61d40" compoundref="torture__list_8c" startline="9" endline="23">torture_ssh_list_new</referencedby>
        <referencedby refid="torture__list_8c_1aa5608b60aa020f0d2f188594c7e189a2" compoundref="torture__list_8c" startline="72" endline="116">torture_ssh_list_prepend</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gad36d247bfcae7965d6aca8245d061e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structssh__iterator" kindref="compound">ssh_iterator</ref> *</type>
        <definition>struct ssh_iterator* ssh_list_get_iterator</definition>
        <argsstring>(const struct ssh_list *list)</argsstring>
        <name>ssh_list_get_iterator</name>
        <param>
          <type>const struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="682" column="19" bodyfile="src/misc.c" bodystart="682" bodyend="686"/>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <referencedby refid="group__libssh__channel_1gac43bae56048b912205d102249b436eec" compoundref="channels_8c" startline="2093" endline="2146">ssh_channel_accept</referencedby>
        <referencedby refid="group__libssh__channel_1ga4c25383c95b09d1b583ef0a9db4b08e2" compoundref="channels_8c" startline="370" endline="385">ssh_channel_from_local</referencedby>
        <referencedby refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" compoundref="client_8c" startline="672" endline="750">ssh_disconnect</referencedby>
        <referencedby refid="group__libssh__poll_1ga51af38de4cc3adbd5566ec1f1b91983d" compoundref="poll_8c" startline="884" endline="923">ssh_event_add_session</referencedby>
        <referencedby refid="group__libssh__poll_1gaab8dec05a0afb49392c63b2ec158ac3d" compoundref="poll_8c" startline="1022" endline="1068">ssh_event_remove_session</referencedby>
        <referencedby refid="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" compoundref="session_8c" startline="191" endline="326">ssh_free</referencedby>
        <referencedby refid="group__libssh__session_1ga95043df5a4378cc43ed13ba7ac5b4d01" compoundref="src_2knownhosts_8c" startline="347" endline="453">ssh_known_hosts_get_algorithms</referencedby>
        <referencedby refid="group__libssh__session_1gad36769864e0a5247edffd6e428e34e8a" compoundref="src_2knownhosts_8c" startline="504" endline="593">ssh_known_hosts_get_algorithms_names</referencedby>
        <referencedby refid="group__libssh__session_1ga4590766bedc2bf9a9f9727b3fac4eaa8" compoundref="src_2knownhosts_8c" startline="215" endline="300">ssh_known_hosts_read_entries</referencedby>
        <referencedby refid="group__libssh__misc_1ga5cd8838fe4ea4b06a2b6729cf89e2415" compoundref="misc_8c" startline="703" endline="713">ssh_list_count</referencedby>
        <referencedby refid="group__libssh__misc_1ga7a929a68f02650d474604a10252afd68" compoundref="misc_8c" startline="688" endline="694">ssh_list_find</referencedby>
        <referencedby refid="group__libssh__messages_1gad2854ea69cec390707b167fa66864152" compoundref="messages_8c" startline="480" endline="491">ssh_message_pop_head</referencedby>
        <referencedby refid="group__libssh__messages_1ga0cfad25d199cf155b3f6f90cd421f855" compoundref="messages_8c" startline="494" endline="504">ssh_message_termination</referencedby>
        <referencedby refid="group__libssh__session_1ga882e56c9ac92b2e860f055ac903e9c07" compoundref="options_8c" startline="1420" endline="1490">ssh_options_apply</referencedby>
        <referencedby refid="group__libssh__session_1gaead8cef1f39e785139bc510852ce1dff" compoundref="options_8c" startline="65" endline="218">ssh_options_copy</referencedby>
        <referencedby refid="group__libssh__session_1gaaa9d400920cad4d6e4a0fb09ff8c7b01" compoundref="options_8c" startline="1113" endline="1170">ssh_options_get</referencedby>
        <referencedby refid="packet_8h_1a2aab95b1998dbe9a6c525ba265768f52" compoundref="packet_8c" startline="1461" endline="1509">ssh_packet_process</referencedby>
        <referencedby refid="packet_8h_1a7e6c7ed74c23ace432476aa8a6841140" compoundref="packet_8c" startline="1761" endline="1843">ssh_packet_send</referencedby>
        <referencedby refid="packet_8c_1a0d61f18303bfc4d1f67c842d522a67bc" compoundref="packet_8c" startline="1391" endline="1413">ssh_packet_socket_controlflow_callback</referencedby>
        <referencedby refid="group__libssh__auth_1ga53e6771b250c061463ed98b6e5b6e0af" compoundref="auth_8c" startline="1007" endline="1212">ssh_userauth_publickey_auto</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1a440a79f135a76bbdc5cd40590ec30765" compoundref="torture__knownhosts__verify_8c" startline="216" endline="270">torture_knownhosts_duplicate</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1ac1c0973d318a3572507db80d43277613" compoundref="torture__knownhosts__verify_8c" startline="146" endline="214">torture_knownhosts_precheck</referencedby>
        <referencedby refid="torture__knownhosts__parsing_8c_1a0a467c6124a654c7fe393521c3cb13fc" compoundref="torture__knownhosts__parsing_8c" startline="329" endline="372">torture_knownhosts_read_file</referencedby>
        <referencedby refid="torture__options_8c_1a64f216f56007a228aff29721e4b97cd3" compoundref="torture__options_8c" startline="805" endline="911">torture_options_copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7a929a68f02650d474604a10252afd68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structssh__iterator" kindref="compound">ssh_iterator</ref> *</type>
        <definition>struct ssh_iterator* ssh_list_find</definition>
        <argsstring>(const struct ssh_list *list, void *value)</argsstring>
        <name>ssh_list_find</name>
        <param>
          <type>const struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="688" column="19" bodyfile="src/misc.c" bodystart="688" bodyend="694"/>
        <references refid="structssh__iterator_1a4cc4eb8c8599a487e7e3321d32a9e9cd" compoundref="misc_8h" startline="46">ssh_iterator::data</references>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="group__libssh__misc_1gad36d247bfcae7965d6aca8245d061e0d" compoundref="misc_8c" startline="682" endline="686">ssh_list_get_iterator</references>
        <referencedby refid="group__libssh__channel_1ga1e7211251562c5e1ec64647236caa745" compoundref="channels_8c" startline="1174" endline="1194">ssh_channel_do_free</referencedby>
        <referencedby refid="packet_8h_1a5316a06c44092abfd23e925958291724" compoundref="packet_8c" startline="1438" endline="1444">ssh_packet_remove_callbacks</referencedby>
        <referencedby refid="group__libssh__callbacks_1gae564352175e887c346a2e062f8124282" compoundref="callbacks_8c" startline="114" endline="130">ssh_remove_channel_callbacks</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga5cd8838fe4ea4b06a2b6729cf89e2415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ssh_list_count</definition>
        <argsstring>(const struct ssh_list *list)</argsstring>
        <name>ssh_list_count</name>
        <param>
          <type>const struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get the number of elements in the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements in the list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="703" column="8" bodyfile="src/misc.c" bodystart="703" bodyend="713"/>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="group__libssh__misc_1gad36d247bfcae7965d6aca8245d061e0d" compoundref="misc_8c" startline="682" endline="686">ssh_list_get_iterator</references>
        <referencedby refid="group__libssh__session_1ga95043df5a4378cc43ed13ba7ac5b4d01" compoundref="src_2knownhosts_8c" startline="347" endline="453">ssh_known_hosts_get_algorithms</referencedby>
        <referencedby refid="group__libssh__session_1gad36769864e0a5247edffd6e428e34e8a" compoundref="src_2knownhosts_8c" startline="504" endline="593">ssh_known_hosts_get_algorithms_names</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1a440a79f135a76bbdc5cd40590ec30765" compoundref="torture__knownhosts__verify_8c" startline="216" endline="270">torture_knownhosts_duplicate</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1ac1c0973d318a3572507db80d43277613" compoundref="torture__knownhosts__verify_8c" startline="146" endline="214">torture_knownhosts_precheck</referencedby>
        <referencedby refid="torture__list_8c_1ad4ca16c96399e75780cc4b9358c4efa5" compoundref="torture__list_8c" startline="25" endline="70">torture_ssh_list_append</referencedby>
        <referencedby refid="torture__list_8c_1a99be327c647edf7744eba2f015d61d40" compoundref="torture__list_8c" startline="9" endline="23">torture_ssh_list_new</referencedby>
        <referencedby refid="torture__list_8c_1aa5608b60aa020f0d2f188594c7e189a2" compoundref="torture__list_8c" startline="72" endline="116">torture_ssh_list_prepend</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga4c467539707d0cee932840c3134ef15d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structssh__iterator" kindref="compound">ssh_iterator</ref> *</type>
        <definition>static struct ssh_iterator* ssh_iterator_new</definition>
        <argsstring>(const void *data)</argsstring>
        <name>ssh_iterator_new</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="715" column="26" bodyfile="src/misc.c" bodystart="715" bodyend="722"/>
        <references refid="structssh__iterator_1a4cc4eb8c8599a487e7e3321d32a9e9cd" compoundref="misc_8h" startline="46">ssh_iterator::data</references>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <referencedby refid="group__libssh__misc_1ga4590c6ff62f0e6feb59e2e3152a6721f" compoundref="misc_8c" startline="724" endline="745">ssh_list_append</referencedby>
        <referencedby refid="group__libssh__misc_1ga7f1c23a518f3ca0b63189763b64141c4" compoundref="misc_8c" startline="747" endline="769">ssh_list_prepend</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga4590c6ff62f0e6feb59e2e3152a6721f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_list_append</definition>
        <argsstring>(struct ssh_list *list, const void *data)</argsstring>
        <name>ssh_list_append</name>
        <param>
          <type>struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="724" column="5" bodyfile="src/misc.c" bodystart="724" bodyend="745"/>
        <references refid="structssh__iterator_1a4cc4eb8c8599a487e7e3321d32a9e9cd" compoundref="misc_8h" startline="46">ssh_iterator::data</references>
        <references refid="structssh__list_1adfd591e8780c0e9039dc181579a54946" compoundref="misc_8h" startline="41">ssh_list::end</references>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <references refid="libssh_8h_1a790179ef432b3b59aaccd9adab0169ec" compoundref="libssh_8h" startline="330">SSH_ERROR</references>
        <references refid="group__libssh__misc_1ga4c467539707d0cee932840c3134ef15d" compoundref="misc_8c" startline="715" endline="722">ssh_iterator_new</references>
        <references refid="libssh_8h_1ac1ee1d1e917456d4760a94a18015377d" compoundref="libssh_8h" startline="329">SSH_OK</references>
        <referencedby refid="callbacks_8c_1ad2b3310e2c1a9718912b3928c5fb76ef" compoundref="callbacks_8c" startline="70" endline="102">ssh_add_set_channel_callbacks</referencedby>
        <referencedby refid="group__libssh__poll_1ga51af38de4cc3adbd5566ec1f1b91983d" compoundref="poll_8c" startline="884" endline="923">ssh_event_add_session</referencedby>
        <referencedby refid="group__libssh__session_1ga95043df5a4378cc43ed13ba7ac5b4d01" compoundref="src_2knownhosts_8c" startline="347" endline="453">ssh_known_hosts_get_algorithms</referencedby>
        <referencedby refid="group__libssh__session_1ga4590766bedc2bf9a9f9727b3fac4eaa8" compoundref="src_2knownhosts_8c" startline="215" endline="300">ssh_known_hosts_read_entries</referencedby>
        <referencedby refid="group__libssh__messages_1ga3b2c6d96a4e786d11db737193b5701a2" compoundref="messages_8c" startline="415" endline="469">ssh_message_queue</referencedby>
        <referencedby refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" compoundref="session_8c" startline="59" endline="181">ssh_new</referencedby>
        <referencedby refid="group__libssh__session_1gaead8cef1f39e785139bc510852ce1dff" compoundref="options_8c" startline="65" endline="218">ssh_options_copy</referencedby>
        <referencedby refid="packet_8h_1a7e6c7ed74c23ace432476aa8a6841140" compoundref="packet_8c" startline="1761" endline="1843">ssh_packet_send</referencedby>
        <referencedby refid="packet_8h_1a6799ed6886c75279d61dcacd83b71102" compoundref="packet_8c" startline="1426" endline="1433">ssh_packet_set_callbacks</referencedby>
        <referencedby refid="torture__callbacks_8c_1abaf15b9caaac997af2eeed22979cc0b5" compoundref="torture__callbacks_8c" startline="123" endline="190">torture_callbacks_execute_list</referencedby>
        <referencedby refid="torture__callbacks_8c_1af52882982a73ee96fc4f37bd1372c3e3" compoundref="torture__callbacks_8c" startline="200" endline="242">torture_callbacks_iterate</referencedby>
        <referencedby refid="torture__list_8c_1ad4ca16c96399e75780cc4b9358c4efa5" compoundref="torture__list_8c" startline="25" endline="70">torture_ssh_list_append</referencedby>
        <referencedby refid="torture__list_8c_1aa5608b60aa020f0d2f188594c7e189a2" compoundref="torture__list_8c" startline="72" endline="116">torture_ssh_list_prepend</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7f1c23a518f3ca0b63189763b64141c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_list_prepend</definition>
        <argsstring>(struct ssh_list *list, const void *data)</argsstring>
        <name>ssh_list_prepend</name>
        <param>
          <type>struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="747" column="5" bodyfile="src/misc.c" bodystart="747" bodyend="769"/>
        <references refid="structssh__iterator_1a4cc4eb8c8599a487e7e3321d32a9e9cd" compoundref="misc_8h" startline="46">ssh_iterator::data</references>
        <references refid="structssh__list_1adfd591e8780c0e9039dc181579a54946" compoundref="misc_8h" startline="41">ssh_list::end</references>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <references refid="libssh_8h_1a790179ef432b3b59aaccd9adab0169ec" compoundref="libssh_8h" startline="330">SSH_ERROR</references>
        <references refid="group__libssh__misc_1ga4c467539707d0cee932840c3134ef15d" compoundref="misc_8c" startline="715" endline="722">ssh_iterator_new</references>
        <references refid="libssh_8h_1ac1ee1d1e917456d4760a94a18015377d" compoundref="libssh_8h" startline="329">SSH_OK</references>
        <referencedby refid="callbacks_8c_1ad2b3310e2c1a9718912b3928c5fb76ef" compoundref="callbacks_8c" startline="70" endline="102">ssh_add_set_channel_callbacks</referencedby>
        <referencedby refid="group__libssh__channel_1gada8ccda7bf65165fe145d3096a252dcc" compoundref="channels_8c" startline="80" endline="129">ssh_channel_new</referencedby>
        <referencedby refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="474" endline="1039">ssh_options_set</referencedby>
        <referencedby refid="torture__list_8c_1aa5608b60aa020f0d2f188594c7e189a2" compoundref="torture__list_8c" startline="72" endline="116">torture_ssh_list_prepend</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gac862429660a1f93dcf625d08f407b85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_list_remove</definition>
        <argsstring>(struct ssh_list *list, struct ssh_iterator *iterator)</argsstring>
        <name>ssh_list_remove</name>
        <param>
          <type>struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>struct <ref refid="structssh__iterator" kindref="compound">ssh_iterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="771" column="6" bodyfile="src/misc.c" bodystart="771" bodyend="798"/>
        <references refid="structssh__list_1adfd591e8780c0e9039dc181579a54946" compoundref="misc_8h" startline="41">ssh_list::end</references>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <references refid="sshd__direct-tcpip_8c_1aed3129b7674034c979192bcca6b0ad8c" compoundref="sshd__direct-tcpip_8c" startline="36">SAFE_FREE</references>
        <referencedby refid="group__libssh__channel_1gac43bae56048b912205d102249b436eec" compoundref="channels_8c" startline="2093" endline="2146">ssh_channel_accept</referencedby>
        <referencedby refid="group__libssh__channel_1ga1e7211251562c5e1ec64647236caa745" compoundref="channels_8c" startline="1174" endline="1194">ssh_channel_do_free</referencedby>
        <referencedby refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" compoundref="client_8c" startline="672" endline="750">ssh_disconnect</referencedby>
        <referencedby refid="group__libssh__poll_1gaab8dec05a0afb49392c63b2ec158ac3d" compoundref="poll_8c" startline="1022" endline="1068">ssh_event_remove_session</referencedby>
        <referencedby refid="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" compoundref="session_8c" startline="191" endline="326">ssh_free</referencedby>
        <referencedby refid="group__libssh__session_1ga95043df5a4378cc43ed13ba7ac5b4d01" compoundref="src_2knownhosts_8c" startline="347" endline="453">ssh_known_hosts_get_algorithms</referencedby>
        <referencedby refid="group__libssh__session_1gad36769864e0a5247edffd6e428e34e8a" compoundref="src_2knownhosts_8c" startline="504" endline="593">ssh_known_hosts_get_algorithms_names</referencedby>
        <referencedby refid="group__libssh__messages_1gad2854ea69cec390707b167fa66864152" compoundref="messages_8c" startline="480" endline="491">ssh_message_pop_head</referencedby>
        <referencedby refid="packet_8h_1a5316a06c44092abfd23e925958291724" compoundref="packet_8c" startline="1438" endline="1444">ssh_packet_remove_callbacks</referencedby>
        <referencedby refid="group__libssh__callbacks_1gae564352175e887c346a2e062f8124282" compoundref="callbacks_8c" startline="114" endline="130">ssh_remove_channel_callbacks</referencedby>
        <referencedby refid="torture__knownhosts__verify_8c_1ac1c0973d318a3572507db80d43277613" compoundref="torture__knownhosts__verify_8c" startline="146" endline="214">torture_knownhosts_precheck</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7a36607f228dfde10db885d03b89c32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* _ssh_list_pop_head</definition>
        <argsstring>(struct ssh_list *list)</argsstring>
        <name>_ssh_list_pop_head</name>
        <param>
          <type>struct <ref refid="structssh__list" kindref="compound">ssh_list</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="811" column="12" bodyfile="src/misc.c" bodystart="811" bodyend="829"/>
        <references refid="structssh__iterator_1a4cc4eb8c8599a487e7e3321d32a9e9cd" compoundref="misc_8h" startline="46">ssh_iterator::data</references>
        <references refid="structssh__list_1adfd591e8780c0e9039dc181579a54946" compoundref="misc_8h" startline="41">ssh_list::end</references>
        <references refid="structssh__iterator_1a7fd7219325e56f365796ad59c8443ee5" compoundref="misc_8h" startline="45">ssh_iterator::next</references>
        <references refid="structssh__list_1aa5c28ddda4de879b07646ac9d43015ae" compoundref="misc_8h" startline="40">ssh_list::root</references>
        <references refid="sshd__direct-tcpip_8c_1aed3129b7674034c979192bcca6b0ad8c" compoundref="sshd__direct-tcpip_8c" startline="36">SAFE_FREE</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gad36f0f8dbde59aefedd385dff76384fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_dirname</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ssh_dirname</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Parse directory component. </para>
        </briefdescription>
        <detaileddescription>
<para>dirname breaks a null-terminated pathname string into a directory component. In the usual case, <ref refid="group__libssh__misc_1gad36f0f8dbde59aefedd385dff76384fa" kindref="member">ssh_dirname()</ref> returns the string up to, but not including, the final &apos;/&apos;. Trailing &apos;/&apos; characters are not counted as part of the pathname. The caller must free the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to parse.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dirname of path or NULL if we can&apos;t allocate memory. If path does not contain a slash, c_dirname() returns the string &quot;.&quot;. If path is the string &quot;/&quot;, it returns the string &quot;/&quot;. If path is NULL or an empty string, &quot;.&quot; is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="847" column="6" bodyfile="src/misc.c" bodystart="847" bodyend="886"/>
        <referencedby refid="group__libssh__session_1gad10b597ab0b641a469c0190e5fe904a8" compoundref="src_2knownhosts_8c" startline="1041" endline="1103">ssh_known_hosts_check_server_key</referencedby>
        <referencedby refid="group__libssh__misc_1ga3208a5e5f292497b039f5fb4c0365965" compoundref="misc_8c" startline="977" endline="1028">ssh_mkdirs</referencedby>
        <referencedby refid="group__libssh__session_1gaf61a9cfdc40c76ffce9f9a8543755d36" compoundref="known__hosts_8c" startline="499" endline="565">ssh_write_knownhost</referencedby>
        <referencedby refid="torture__misc_8c_1a4c430ea06569da346f5e5a031ebc83c5" compoundref="torture__misc_8c" startline="71" endline="84">torture_dirname</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga83b053a8bdf80eea5ebc662e5098a52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_basename</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ssh_basename</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>basename - parse filename component. </para>
        </briefdescription>
        <detaileddescription>
<para>basename breaks a null-terminated pathname string into a filename component. <ref refid="group__libssh__misc_1ga83b053a8bdf80eea5ebc662e5098a52b" kindref="member">ssh_basename()</ref> returns the component following the final &apos;/&apos;. Trailing &apos;/&apos; characters are not counted as part of the pathname.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to parse.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The filename of path or NULL if we can&apos;t allocate memory. If path is a the string &quot;/&quot;, basename returns the string &quot;/&quot;. If path is NULL or an empty string, &quot;.&quot; is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="902" column="6" bodyfile="src/misc.c" bodystart="902" bodyend="940"/>
        <references refid="test__socket_8c_1a73991beba1accdcc64730cb00c146fe2" compoundref="test__socket_8c" startline="34">s</references>
        <referencedby refid="torture__scp_8c_1a4c842d8a0ce0e842445303734e0b97fe" compoundref="torture__scp_8c" startline="80" endline="124">session_setup</referencedby>
        <referencedby refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" compoundref="scp_8c" startline="320" endline="399">ssh_scp_push_directory</referencedby>
        <referencedby refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="456" endline="540">ssh_scp_push_file64</referencedby>
        <referencedby refid="torture__misc_8c_1aa051fae1529b7257632200c90bbac936" compoundref="torture__misc_8c" startline="56" endline="69">torture_basename</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga5e15e93beecaef3af67d02b7ba55309f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_mkdir</definition>
        <argsstring>(const char *pathname, mode_t mode)</argsstring>
        <name>ssh_mkdir</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Attempts to create a directory with the given pathname. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the portable version of mkdir, mode is ignored on Windows systems.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pathname</parametername>
</parameternamelist>
<parameterdescription>
<para>The path name to create the directory.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The permissions to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error with errno set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="953" column="5" bodyfile="src/misc.c" bodystart="953" bodyend="963"/>
        <referencedby refid="torture__misc_8c_1a181933ed646695542ff693fb5546964f" compoundref="torture__misc_8c" startline="367" endline="410">torture_ssh_dir_writeable</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga3208a5e5f292497b039f5fb4c0365965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_mkdirs</definition>
        <argsstring>(const char *pathname, mode_t mode)</argsstring>
        <name>ssh_mkdirs</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Attempts to create a directory with the given pathname. The missing directories in the given pathname are created recursively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pathname</parametername>
</parameternamelist>
<parameterdescription>
<para>The path name to create the directory.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The permissions to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error with errno set.</para>
</simplesect>
<simplesect kind="note"><para>mode is ignored on Windows systems. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="977" column="5" bodyfile="src/misc.c" bodystart="977" bodyend="1028"/>
        <references refid="pkd__daemon_8c_1ac6509c6fe4cbf7bde170597172f8a288" compoundref="pkd__daemon_8c" startline="62">rc</references>
        <references refid="sshd__direct-tcpip_8c_1aed3129b7674034c979192bcca6b0ad8c" compoundref="sshd__direct-tcpip_8c" startline="36">SAFE_FREE</references>
        <references refid="group__libssh__misc_1gad36f0f8dbde59aefedd385dff76384fa" compoundref="misc_8c" startline="847" endline="886">ssh_dirname</references>
        <references refid="group__libssh__misc_1ga3208a5e5f292497b039f5fb4c0365965" compoundref="misc_8c" startline="977" endline="1028">ssh_mkdirs</references>
        <referencedby refid="group__libssh__session_1gad10b597ab0b641a469c0190e5fe904a8" compoundref="src_2knownhosts_8c" startline="1041" endline="1103">ssh_known_hosts_check_server_key</referencedby>
        <referencedby refid="group__libssh__misc_1ga3208a5e5f292497b039f5fb4c0365965" compoundref="misc_8c" startline="977" endline="1028">ssh_mkdirs</referencedby>
        <referencedby refid="group__libssh__session_1gaf61a9cfdc40c76ffce9f9a8543755d36" compoundref="known__hosts_8c" startline="499" endline="565">ssh_write_knownhost</referencedby>
        <referencedby refid="torture__misc_8c_1a3fc4093e1bd00dbd7dedd1abd5f0c258" compoundref="torture__misc_8c" startline="412" endline="502">torture_ssh_mkdirs</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga85622306848fd7e735d5843747f6eb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_path_expand_tilde</definition>
        <argsstring>(const char *d)</argsstring>
        <name>ssh_path_expand_tilde</name>
        <param>
          <type>const char *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Expand a directory starting with a tilde &apos;~&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory to expand.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expanded directory, NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1037" column="6" bodyfile="src/misc.c" bodystart="1037" bodyend="1093"/>
        <references refid="test__socket_8c_1a73991beba1accdcc64730cb00c146fe2" compoundref="test__socket_8c" startline="34">s</references>
        <references refid="sshd__direct-tcpip_8c_1aed3129b7674034c979192bcca6b0ad8c" compoundref="sshd__direct-tcpip_8c" startline="36">SAFE_FREE</references>
        <references refid="group__libssh__misc_1ga894753441a2150b0599fdb283bf02c24" compoundref="misc_8c" startline="241" endline="263">ssh_get_user_home_dir</references>
        <referencedby refid="torture__client__config_8c_1addbd98b07c96dc8546c2a3b053bbcf4e" compoundref="torture__client__config_8c" startline="31" endline="60">setup_config_files</referencedby>
        <referencedby refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="474" endline="1039">ssh_options_set</referencedby>
        <referencedby refid="group__libssh__misc_1gabee03cec7d5ba668885bd1a47e9650ea" compoundref="misc_8c" startline="1106" endline="1207">ssh_path_expand_escape</referencedby>
        <referencedby refid="torture__client__config_8c_1a199383cdaf56acd2611400b9bb125142" compoundref="torture__client__config_8c" startline="62" endline="81">teardown</referencedby>
        <referencedby refid="torture__client__config_8c_1a9e7c020c14631166e6fa3869074a80eb" compoundref="torture__client__config_8c" startline="136" endline="178">torture_client_config_emulate</referencedby>
        <referencedby refid="torture__misc_8c_1aacc65e8d5650800f39d8e4f497a42074" compoundref="torture__misc_8c" startline="124" endline="165">torture_path_expand_tilde_unix</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gabee03cec7d5ba668885bd1a47e9650ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_path_expand_escape</definition>
        <argsstring>(ssh_session session, const char *s)</argsstring>
        <name>ssh_path_expand_escape</name>
        <param>
          <type><ref refid="libssh_8h_1a02d3754de040612632cdd499c20f92f6" kindref="member">ssh_session</ref></type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1106" column="6" bodyfile="src/misc.c" bodystart="1106" bodyend="1207"/>
        <references refid="sshnetcat_8c_1a1c2046dcb30a629d6d9f45ff8f403f12" compoundref="sshnetcat_8c" startline="37">host</references>
        <references refid="structssh__session__struct_1a61ec248e9e188ab45e144b5a33bdcf70" compoundref="session_8h" startline="211">ssh_session_struct::host</references>
        <references refid="priv_8h_1a7244ab798f58214294b580ca0bb48552" compoundref="priv_8h" startline="190">MAX_BUF_SIZE</references>
        <references refid="structssh__session__struct_1a1c29cf990c1d0df6e1b0971d4f3d1f3e">ssh_session_struct::opts</references>
        <references refid="structssh__session__struct_1a2f52d8c57c0e1b00bade912a0027ce8b" compoundref="session_8h" startline="222">ssh_session_struct::port</references>
        <references refid="test__socket_8c_1a73991beba1accdcc64730cb00c146fe2" compoundref="test__socket_8c" startline="34">s</references>
        <references refid="sshd__direct-tcpip_8c_1aed3129b7674034c979192bcca6b0ad8c" compoundref="sshd__direct-tcpip_8c" startline="36">SAFE_FREE</references>
        <references refid="torture__session__keys_8c_1a1ea82fff28491cf424fc0753ec725adb" compoundref="torture__session__keys_8c" startline="61">session</references>
        <references refid="libssh_8h_1a036b2b00fb04337a4d06d719d1b62be1a86ff0b2e8da6ad8628efc556b6ce1887" compoundref="libssh_8h" startline="286">SSH_FATAL</references>
        <references refid="group__libssh__misc_1gaa9b6cc5a03233cde110bc394a9cc1a51" compoundref="misc_8c" startline="300" endline="320">ssh_get_local_username</references>
        <references refid="group__libssh__misc_1ga85622306848fd7e735d5843747f6eb28" compoundref="misc_8c" startline="1037" endline="1093">ssh_path_expand_tilde</references>
        <references refid="priv_8h_1a55177b3e8db90ca9adb435c44281963c" compoundref="priv_8h" startline="258">ssh_set_error</references>
        <references refid="priv_8h_1ae280c413c792e04237f000841ac8ce44" compoundref="priv_8h" startline="265">ssh_set_error_oom</references>
        <references refid="structssh__session__struct_1a61b53e777c7069d7b086b71b31d8925b" compoundref="session_8h" startline="213">ssh_session_struct::sshdir</references>
        <references refid="structssh__session__struct_1a8ed5d5d3116679fd7b8f2c0e1db92726" compoundref="session_8h" startline="210">ssh_session_struct::username</references>
        <referencedby refid="config_8c_1a45c85072922b6f53ea96012589d601db" compoundref="config_8c" startline="508" endline="1134">ssh_config_parse_line</referencedby>
        <referencedby refid="config_8c_1ab0dead825ebe00cc6f4e5d5e9f54e1c8" compoundref="config_8c" startline="396" endline="414">ssh_match_exec</referencedby>
        <referencedby refid="group__libssh__session_1ga882e56c9ac92b2e860f055ac903e9c07" compoundref="options_8c" startline="1420" endline="1490">ssh_options_apply</referencedby>
        <referencedby refid="group__libssh__session_1ga82371e723260c7572ea061edecc2e9f1" compoundref="options_8c" startline="1375" endline="1418">ssh_options_parse_config</referencedby>
        <referencedby refid="torture__misc_8c_1ad25e0c3cb23b78605e692b99fe754665" compoundref="torture__misc_8c" startline="169" endline="182">torture_path_expand_escape</referencedby>
        <referencedby refid="torture__misc_8c_1a955df497c3daffa64d211389df7c09f2" compoundref="torture__misc_8c" startline="184" endline="194">torture_path_expand_known_hosts</referencedby>
        <referencedby refid="torture__misc_8c_1aa08c5160acbfbadd10577d890e3c178b" compoundref="torture__misc_8c" startline="196" endline="206">torture_path_expand_percent</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gae795e33139e9c0ad1611fc4fdf476fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_analyze_banner</definition>
        <argsstring>(ssh_session session, int server)</argsstring>
        <name>ssh_analyze_banner</name>
        <param>
          <type><ref refid="libssh_8h_1a02d3754de040612632cdd499c20f92f6" kindref="member">ssh_session</ref></type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>server</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1221" column="5" bodyfile="src/misc.c" bodystart="1221" bodyend="1310"/>
        <references refid="structssh__session__struct_1aff7925f04070fc20dc3d9366d7f2f748" compoundref="session_8h" startline="113">ssh_session_struct::clientbanner</references>
        <references refid="priv_8h_1a38dadd06badcc5b7cca444a551604399" compoundref="priv_8h" startline="404">FALL_THROUGH</references>
        <references refid="structssh__session__struct_1abe4bdadafb7d84c9a2095a9a11af1006" compoundref="session_8h" startline="117">ssh_session_struct::openssh</references>
        <references refid="structssh__session__struct_1a9a1f525932e35bb7439abbf121cd8de0" compoundref="session_8h" startline="112">ssh_session_struct::serverbanner</references>
        <references refid="torture__session__keys_8c_1a1ea82fff28491cf424fc0753ec725adb" compoundref="torture__session__keys_8c" startline="61">session</references>
        <references refid="libssh_8h_1a036b2b00fb04337a4d06d719d1b62be1a86ff0b2e8da6ad8628efc556b6ce1887" compoundref="libssh_8h" startline="286">SSH_FATAL</references>
        <references refid="priv_8h_1aa21fd8a7a609329603b7b16da7939fca" compoundref="priv_8h" startline="240">SSH_LOG</references>
        <references refid="group__libssh__log_1ggadf764cbdea00d65edcd07bb9953ad2b7a75fa79e63947b66462db977d9b5ae27c" compoundref="libssh_8h" startline="349">SSH_LOG_PROTOCOL</references>
        <references refid="priv_8h_1a55177b3e8db90ca9adb435c44281963c" compoundref="priv_8h" startline="258">ssh_set_error</references>
        <references refid="libssh_8h_1adcc45f505791bc456763cfc206f2d9ab" compoundref="libssh_8h" startline="75">SSH_VERSION_INT</references>
        <referencedby refid="group__libssh__session_1gafa8d153635a261e97870ab71d570149a" compoundref="client_8c" startline="384" endline="478">ssh_client_connection_callback</referencedby>
        <referencedby refid="group__libssh__server_1ga6b0057a0346a87ddd9b57bfbbc580d4d" compoundref="server_8c" startline="338" endline="449">ssh_server_connection_callback</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_timestamp_init</definition>
        <argsstring>(struct ssh_timestamp *ts)</argsstring>
        <name>ssh_timestamp_init</name>
        <param>
          <type>struct <ref refid="structssh__timestamp" kindref="compound">ssh_timestamp</ref> *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1324" column="6" bodyfile="src/misc.c" bodystart="1324" bodyend="1335"/>
        <references refid="group__libssh__misc_1ga3be7ef61d339af381862a81d4b363efb" compoundref="misc_8c" startline="1316">CLOCK</references>
        <references refid="structssh__timestamp_1a6d92f08504f05cb9bb6677b2ead9657c" compoundref="misc_8h" startline="50">ssh_timestamp::seconds</references>
        <references refid="structssh__timestamp_1a10f353b431cf1f19eed7948d9e0ed85f" compoundref="misc_8h" startline="51">ssh_timestamp::useconds</references>
        <referencedby refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" compoundref="channels_8c" startline="3284" endline="3398">ssh_channel_select</referencedby>
        <referencedby refid="group__libssh__session_1ga4b84e1ae757c0d4007a5eefdf4651694" compoundref="session_8c" startline="692" endline="740">ssh_handle_packets_termination</referencedby>
        <referencedby refid="packet_8h_1ab8efa43ad331ae38c5a72bea6b5f6a14" compoundref="packet_8c" startline="1877" endline="1994">ssh_packet_set_newkeys</referencedby>
        <referencedby refid="group__libssh__poll_1ga6c0f6d3c677838181df5cd03a755fd7c" compoundref="poll_8c" startline="663" endline="721">ssh_poll_ctx_dopoll</referencedby>
        <referencedby refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" compoundref="connect_8c" startline="316" endline="395">ssh_select</referencedby>
        <referencedby refid="group__libssh__misc_1ga1a6abbb2da16c6543f7de29b5c98f086" compoundref="misc_8c" startline="1388" endline="1411">ssh_timeout_elapsed</referencedby>
        <referencedby refid="group__libssh__misc_1gad1c4b29e2421eb8f9ca111d98b0c2976" compoundref="misc_8c" startline="1420" endline="1432">ssh_timeout_update</referencedby>
        <referencedby refid="torture__misc_8c_1a1fabb2480bb922b2a7f8a224cb6c42bf" compoundref="torture__misc_8c" startline="208" endline="218">torture_timeout_elapsed</referencedby>
        <referencedby refid="torture__misc_8c_1ab20f1c8fe50996f8fec7f5b2230e7475" compoundref="torture__misc_8c" startline="220" endline="230">torture_timeout_update</referencedby>
        <referencedby refid="torture_8c_1adb818fce0b36b2c70af8df12ea648ac6" compoundref="torture_8c" startline="810" endline="826">torture_wait_for_daemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga8252b2c061fd7e0f75a00696e4edf12d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_timestamp_difference</definition>
        <argsstring>(struct ssh_timestamp *old, struct ssh_timestamp *new)</argsstring>
        <name>ssh_timestamp_difference</name>
        <param>
          <type>struct <ref refid="structssh__timestamp" kindref="compound">ssh_timestamp</ref> *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>struct <ref refid="structssh__timestamp" kindref="compound">ssh_timestamp</ref> *</type>
          <declname>new</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1347" column="12" bodyfile="src/misc.c" bodystart="1347" bodyend="1358"/>
        <references refid="structssh__timestamp_1a6d92f08504f05cb9bb6677b2ead9657c" compoundref="misc_8h" startline="50">ssh_timestamp::seconds</references>
        <references refid="structssh__timestamp_1a10f353b431cf1f19eed7948d9e0ed85f" compoundref="misc_8h" startline="51">ssh_timestamp::useconds</references>
        <referencedby refid="group__libssh__misc_1ga1a6abbb2da16c6543f7de29b5c98f086" compoundref="misc_8c" startline="1388" endline="1411">ssh_timeout_elapsed</referencedby>
        <referencedby refid="group__libssh__misc_1gad1c4b29e2421eb8f9ca111d98b0c2976" compoundref="misc_8c" startline="1420" endline="1432">ssh_timeout_update</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7178af941c118949a8a7f34e3b5c815e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_make_milliseconds</definition>
        <argsstring>(long sec, long usec)</argsstring>
        <name>ssh_make_milliseconds</name>
        <param>
          <type>long</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>long</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1368" column="5" bodyfile="src/misc.c" bodystart="1368" bodyend="1376"/>
        <referencedby refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="633" endline="665">ssh_handle_packets</referencedby>
        <referencedby refid="group__libssh__session_1ga4b84e1ae757c0d4007a5eefdf4651694" compoundref="session_8c" startline="692" endline="740">ssh_handle_packets_termination</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga1a6abbb2da16c6543f7de29b5c98f086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_timeout_elapsed</definition>
        <argsstring>(struct ssh_timestamp *ts, int timeout)</argsstring>
        <name>ssh_timeout_elapsed</name>
        <param>
          <type>struct <ref refid="structssh__timestamp" kindref="compound">ssh_timestamp</ref> *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1388" column="5" bodyfile="src/misc.c" bodystart="1388" bodyend="1411"/>
        <references refid="priv_8h_1aa21fd8a7a609329603b7b16da7939fca" compoundref="priv_8h" startline="240">SSH_LOG</references>
        <references refid="libssh_8h_1ab3c2f1accd58d32987f02d8aebdc1fc4" compoundref="libssh_8h" startline="370">SSH_LOG_WARN</references>
        <references refid="group__libssh__misc_1ga8252b2c061fd7e0f75a00696e4edf12d" compoundref="misc_8c" startline="1347" endline="1358">ssh_timestamp_difference</references>
        <references refid="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" compoundref="misc_8c" startline="1324" endline="1335">ssh_timestamp_init</references>
        <referencedby refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" compoundref="channels_8c" startline="3284" endline="3398">ssh_channel_select</referencedby>
        <referencedby refid="group__libssh__session_1ga4b84e1ae757c0d4007a5eefdf4651694" compoundref="session_8c" startline="692" endline="740">ssh_handle_packets_termination</referencedby>
        <referencedby refid="packet_8c_1ac428e05e42c8ce6fc90963d991c2e560" compoundref="packet_8c" startline="981" endline="1045">ssh_packet_need_rekey</referencedby>
        <referencedby refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" compoundref="connect_8c" startline="316" endline="395">ssh_select</referencedby>
        <referencedby refid="torture__misc_8c_1a1fabb2480bb922b2a7f8a224cb6c42bf" compoundref="torture__misc_8c" startline="208" endline="218">torture_timeout_elapsed</referencedby>
        <referencedby refid="torture_8c_1adb818fce0b36b2c70af8df12ea648ac6" compoundref="torture_8c" startline="810" endline="826">torture_wait_for_daemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gad1c4b29e2421eb8f9ca111d98b0c2976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_timeout_update</definition>
        <argsstring>(struct ssh_timestamp *ts, int timeout)</argsstring>
        <name>ssh_timeout_update</name>
        <param>
          <type>struct <ref refid="structssh__timestamp" kindref="compound">ssh_timestamp</ref> *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>updates a timeout value so it reflects the remaining time </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an existing timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds. Negative values mean infinite timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>remaining time in milliseconds, 0 if elapsed, -1 if never. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1420" column="5" bodyfile="src/misc.c" bodystart="1420" bodyend="1432"/>
        <references refid="group__libssh__misc_1ga8252b2c061fd7e0f75a00696e4edf12d" compoundref="misc_8c" startline="1347" endline="1358">ssh_timestamp_difference</references>
        <references refid="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" compoundref="misc_8c" startline="1324" endline="1335">ssh_timestamp_init</references>
        <referencedby refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" compoundref="channels_8c" startline="3284" endline="3398">ssh_channel_select</referencedby>
        <referencedby refid="group__libssh__session_1ga4b84e1ae757c0d4007a5eefdf4651694" compoundref="session_8c" startline="692" endline="740">ssh_handle_packets_termination</referencedby>
        <referencedby refid="group__libssh__poll_1ga6c0f6d3c677838181df5cd03a755fd7c" compoundref="poll_8c" startline="663" endline="721">ssh_poll_ctx_dopoll</referencedby>
        <referencedby refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" compoundref="connect_8c" startline="316" endline="395">ssh_select</referencedby>
        <referencedby refid="torture__misc_8c_1ab20f1c8fe50996f8fec7f5b2230e7475" compoundref="torture__misc_8c" startline="220" endline="230">torture_timeout_update</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaf3cfcc97538c099a8f3d2a8b9ac8c258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_match_group</definition>
        <argsstring>(const char *group, const char *object)</argsstring>
        <name>ssh_match_group</name>
        <param>
          <type>const char *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1435" column="5" bodyfile="src/misc.c" bodystart="1435" bodyend="1458"/>
        <references refid="namespacegenerate_1a3bb1e673073a90dc0b8d1659852706e3" compoundref="generate_8py" startline="3">generate.a</references>
        <referencedby refid="group__libssh__pki_1ga79010baa7b7ca9d4467910ff863e669d" compoundref="pki_8c" startline="371" endline="401">ssh_key_algorithm_allowed</referencedby>
        <referencedby refid="kex_8h_1a383f228ab9f645f88b728125844dad39" compoundref="kex_8c" startline="329" endline="543">SSH_PACKET_CALLBACK</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga51869b401cb0f3e711527bc9a730fbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void explicit_bzero</definition>
        <argsstring>(void *s, size_t n)</argsstring>
        <name>explicit_bzero</name>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1461" column="6" bodyfile="src/misc.c" bodystart="1461" bodyend="1474"/>
        <references refid="test__socket_8c_1a73991beba1accdcc64730cb00c146fe2" compoundref="test__socket_8c" startline="34">s</references>
        <referencedby refid="bcrypt__pbkdf_8c_1aa06621d6b6b991f40b40f8ca4767671e" compoundref="bcrypt__pbkdf_8c" startline="66" endline="104">bcrypt_hash</referencedby>
        <referencedby refid="pki__priv_8h_1ab650514d50b19a9f4ebd5322a9b0fc5d" compoundref="bcrypt__pbkdf_8c" startline="107" endline="182">bcrypt_pbkdf</referencedby>
        <referencedby refid="group__libssh__buffer_1gae0e221aeee158e4762f95207c7f31a68" compoundref="buffer_8c" startline="226" endline="247">buffer_shift</referencedby>
        <referencedby refid="wrapper_8h_1a9cea366077f4498746e7e448cf21ac0d" compoundref="wrapper_8c" startline="161" endline="231">crypto_free</referencedby>
        <referencedby refid="pki__priv_8h_1abb580d92eaeac82f200b332bb09043dd" compoundref="pki__ed25519_8c" startline="101" endline="149">pki_ed25519_verify</referencedby>
        <referencedby refid="group__libssh__pki_1gae8b8a710eea5b5c36c9e2416cc0734d7" compoundref="pki__container__openssh_8c" startline="101" endline="222">pki_private_key_decrypt</referencedby>
        <referencedby refid="group__libssh__pki_1gad2addfee75214413f07493a89638350f" compoundref="pki__container__openssh_8c" startline="432" endline="524">pki_private_key_encrypt</referencedby>
        <referencedby refid="pki__priv_8h_1a9d88e1b6e93f81dc11ebded5384646e3" compoundref="pki__crypto_8c" startline="2139" endline="2279">pki_sign_data</referencedby>
        <referencedby refid="pki__crypto_8c_1a0f1df403c735a5e15982a028f1540024" compoundref="pki__crypto_8c" startline="1656" endline="1773">pki_signature_from_dsa_blob</referencedby>
        <referencedby refid="pki__crypto_8c_1ae3a66a820cd45b733f5ff75f898a0f33" compoundref="pki__crypto_8c" startline="1775" endline="1911">pki_signature_from_ecdsa_blob</referencedby>
        <referencedby refid="pki__crypto_8c_1ad2beac840c71e6ffb9c0dfede0704905" compoundref="pki__crypto_8c" startline="1587" endline="1654">pki_signature_from_rsa_blob</referencedby>
        <referencedby refid="group__libssh__buffer_1ga66ac61dc075863462b8d83b65660e7df" compoundref="buffer_8c" startline="181" endline="220">realloc_buffer</referencedby>
        <referencedby refid="group__libssh__buffer_1ga608cf73226454f21e8b2f9f1d838c5fc" compoundref="buffer_8c" startline="149" endline="166">ssh_buffer_free</referencedby>
        <referencedby refid="group__libssh__buffer_1gad877da63fd8d9a0ee00859bfbacf1eda" compoundref="buffer_8c" startline="259" endline="287">ssh_buffer_reinit</referencedby>
        <referencedby refid="group__libssh__buffer_1gad6f2016153a535fcc92b10a5267a729c" compoundref="buffer_8c" startline="1083" endline="1324">ssh_buffer_unpack_va</referencedby>
        <referencedby refid="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" compoundref="session_8c" startline="191" endline="326">ssh_free</referencedby>
        <referencedby refid="group__libssh__misc_1gad6effc9fcc3529ae5d7301fb096aa71c" compoundref="getpass_8c" startline="212" endline="282">ssh_getpass</referencedby>
        <referencedby refid="getpass_8c_1ac691c8e41a2312ee5d6f383129a49150" compoundref="getpass_8c" startline="47" endline="115">ssh_gets</referencedby>
        <referencedby refid="group__libssh__auth_1gac042e71960b1aa80d8245125feeb249a" compoundref="auth_8c" startline="1387" endline="1419">ssh_kbdint_clean</referencedby>
        <referencedby refid="group__libssh__auth_1ga43266010b4cc11e277658c4c6c4a5500" compoundref="auth_8c" startline="1351" endline="1385">ssh_kbdint_free</referencedby>
        <referencedby refid="group__libssh__pki_1ga9ee6aacb86cb7f4e8f3b5ec582040d3a" compoundref="pki_8c" startline="145" endline="199">ssh_key_clean</referencedby>
        <referencedby refid="group__libssh__messages_1ga9d1b1d2279c6be3539f2b630960759c3" compoundref="messages_8c" startline="582" endline="637">ssh_message_free</referencedby>
        <referencedby refid="packet__crypt_8c_1abdf83dcec86ab5fce6c237e3f1622788" compoundref="packet__crypt_8c" startline="133" endline="213">ssh_packet_encrypt</referencedby>
        <referencedby refid="pki__priv_8h_1a0a1b01b666de3e4f433660761c7658ad" compoundref="pki__container__openssh_8c" startline="534" endline="722">ssh_pki_openssh_privkey_export</referencedby>
        <referencedby refid="group__libssh__pki_1gaf78ebf6bac541ad8a6de9b6509dc0fff" compoundref="pki_8c" startline="2403" endline="2484">ssh_pki_signature_verify</referencedby>
        <referencedby refid="group__libssh__string_1gaca1c58e13e7bdb72ea8410592fa0cbf6" compoundref="string_8c" startline="249" endline="255">ssh_string_burn</referencedby>
        <referencedby refid="token_8h_1aaea36e878feebb28b8497eb8bf2bdd1f" compoundref="token_8c" startline="42" endline="58">ssh_tokens_free</referencedby>
        <referencedby refid="group__libssh__auth_1ga75e44b1f27059a00080f80fac0107a20" compoundref="auth_8c" startline="1862" endline="1894">ssh_userauth_kbdint_setanswer</referencedby>
        <referencedby refid="torture__packet_8c_1ad28ea8febde081f05f3c6379e5397dd4" compoundref="torture__packet_8c" startline="45" endline="138">torture_packet</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga8b860ba32fef12da8acd4507c059e509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* strndup</definition>
        <argsstring>(const char *s, size_t n)</argsstring>
        <name>strndup</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1478" column="6" bodyfile="src/misc.c" bodystart="1478" bodyend="1495"/>
        <references refid="test__socket_8c_1a73991beba1accdcc64730cb00c146fe2" compoundref="test__socket_8c" startline="34">s</references>
        <referencedby refid="config__parser_8h_1a45ac269803783babc1fc14db0b8fc732" compoundref="config__parser_8c" startline="159" endline="262">ssh_config_parse_uri</referencedby>
        <referencedby refid="group__libssh__session_1ga85ab9f031ff137ad3f9e14341b514f5b" compoundref="dh_8c" startline="678" endline="694">ssh_get_b64_unpadded</referencedby>
        <referencedby refid="group__libssh__pki_1ga320970245fa4e3ab873888b581e13378" compoundref="pki_8c" startline="841" endline="878">ssh_pki_export_privkey_base64</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga5eef4c3ff7b195f33b41c6ae5c0b1832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uint64_inc</definition>
        <argsstring>(unsigned char *counter)</argsstring>
        <name>uint64_inc</name>
        <param>
          <type>unsigned char *</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1500" column="1" bodyfile="src/misc.c" bodystart="1500" bodyend="1509"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga3a7b41aee872513df2e3de6cdf22ec5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_quote_file_name</definition>
        <argsstring>(const char *file_name, char *buf, size_t buf_len)</argsstring>
        <name>ssh_quote_file_name</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1540" column="5" bodyfile="src/misc.c" bodystart="1540" bodyend="1693"/>
        <references refid="misc_8h_1a82fe86776fe0f6e6bad79e5a1e5fb6eaabc8fd6d8086c34e93f1acc80e59bb493" compoundref="misc_8h" startline="57">DOUBLE_QUOTE</references>
        <references refid="proxy_8c_1a11614f44ef4d939bdd984953346a7572" compoundref="proxy_8c" startline="33">error</references>
        <references refid="misc_8h_1a82fe86776fe0f6e6bad79e5a1e5fb6eaa4ee3a87f10b328ca1486e87082a410a6" compoundref="misc_8h" startline="55">NO_QUOTE</references>
        <references refid="misc_8h_1a82fe86776fe0f6e6bad79e5a1e5fb6eaaf677a70fa40d7e495c4588619320de5c" compoundref="misc_8h" startline="56">SINGLE_QUOTE</references>
        <references refid="libssh_8h_1a790179ef432b3b59aaccd9adab0169ec" compoundref="libssh_8h" startline="330">SSH_ERROR</references>
        <references refid="priv_8h_1aa21fd8a7a609329603b7b16da7939fca" compoundref="priv_8h" startline="240">SSH_LOG</references>
        <references refid="group__libssh__log_1ggadf764cbdea00d65edcd07bb9953ad2b7a12e6bbab0c5a667e259e2f9599a72550" compoundref="libssh_8h" startline="346">SSH_LOG_WARNING</references>
        <referencedby refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" compoundref="scp_8c" startline="119" endline="230">ssh_scp_init</referencedby>
        <referencedby refid="torture__misc_8c_1aa5be6dded4c0979bd47da4aa4d1ad225" compoundref="torture__misc_8c" startline="504" endline="638">torture_ssh_quote_file_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gab037701ea7c4084918793a839fcdc767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_newline_vis</definition>
        <argsstring>(const char *string, char *buf, size_t buf_len)</argsstring>
        <name>ssh_newline_vis</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1710" column="5" bodyfile="src/misc.c" bodystart="1710" bodyend="1736"/>
        <references refid="libssh_8h_1a790179ef432b3b59aaccd9adab0169ec" compoundref="libssh_8h" startline="330">SSH_ERROR</references>
        <references refid="priv_8h_1aa21fd8a7a609329603b7b16da7939fca" compoundref="priv_8h" startline="240">SSH_LOG</references>
        <references refid="group__libssh__log_1ggadf764cbdea00d65edcd07bb9953ad2b7a12e6bbab0c5a667e259e2f9599a72550" compoundref="libssh_8h" startline="346">SSH_LOG_WARNING</references>
        <referencedby refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" compoundref="scp_8c" startline="320" endline="399">ssh_scp_push_directory</referencedby>
        <referencedby refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="456" endline="540">ssh_scp_push_file64</referencedby>
        <referencedby refid="torture__misc_8c_1aeafe803e2a63f22130674c32a006326c" compoundref="torture__misc_8c" startline="640" endline="656">torture_ssh_newline_vis</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaacd48b33d4b9e0934a0e2819340aa033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_tmpname</definition>
        <argsstring>(char *template)</argsstring>
        <name>ssh_tmpname</name>
        <param>
          <type>char *</type>
          <declname>template</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1747" column="5" bodyfile="src/misc.c" bodystart="1747" bodyend="1787"/>
        <references refid="priv_8h_1aa21fd8a7a609329603b7b16da7939fca" compoundref="priv_8h" startline="240">SSH_LOG</references>
        <references refid="group__libssh__log_1ggadf764cbdea00d65edcd07bb9953ad2b7a12e6bbab0c5a667e259e2f9599a72550" compoundref="libssh_8h" startline="346">SSH_LOG_WARNING</references>
        <references refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884">time</references>
        <referencedby refid="torture__pki__rsa__uri_8c_1a14cd9e2eaedaaf1f212f073ed8e7392b" compoundref="torture__pki__rsa__uri_8c" startline="34" endline="93">setup_tokens</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7adc290e458af7d963eaeec0d95e1bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_strreplace</definition>
        <argsstring>(const char *src, const char *pattern, const char *replace)</argsstring>
        <name>ssh_strreplace</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>replace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1802" column="6" bodyfile="src/misc.c" bodystart="1802" bodyend="1838"/>
        <references refid="torture_8c_1acd28ae39c6440992e47d3da772c56602" compoundref="torture_8c" startline="75">pattern</references>
        <referencedby refid="group__libssh__pki_1gaa94ec2542a8dc9fb32c0989680a1e20f" compoundref="pki_8c" startline="1693" endline="1702">ssh_pki_export_pub_uri_from_priv_uri</referencedby>
        <referencedby refid="torture__misc_8c_1ae7877dff2f3e8b8a990fc7346786a8df" compoundref="torture__misc_8c" startline="658" endline="724">torture_ssh_strreplace</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__libssh__misc_1ga89cd34ceafacdb777878d4bf68da7a7e" prot="public" static="no">
        <name>NSS_BUFLEN_PASSWD</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="238" column="9" bodyfile="src/misc.c" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__misc_1ga3be7ef61d339af381862a81d4b363efb" prot="public" static="no">
        <name>CLOCK</name>
        <initializer>CLOCK_REALTIME</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="1316" column="10" bodyfile="src/misc.c" bodystart="1316" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Different helper functions used in the SSH Library. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
