<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="curve25519-sha256_0dlibssh_8org_8txt" kind="file" language="C++">
    <compoundname>curve25519-sha256@libssh.org.txt</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="curve25519-sha256_0dlibssh_8org_8txt_1a795ebdfa2bc5ee7767f222bd8af50e1b" prot="public" static="no">
        <type>248</type>
        <definition>mysecret&amp; [31] mysecret[31]</definition>
        <argsstring></argsstring>
        <name>mysecret</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="76" column="1" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="curve25519-sha256_0dlibssh_8org_8txt_1ab526bdf21603db5d6df24cbe34edc3d7" prot="public" static="no">
        <type>{9}</type>
        <definition>using basepoint =  {9}</definition>
        <argsstring></argsstring>
        <name>basepoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="89" column="1" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the following</definition>
        <argsstring></argsstring>
        <name>following</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="10" column="19" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1ab22c0f1ae13657fbafcee1043f715cc2" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into softwares</definition>
        <argsstring></argsstring>
        <name>softwares</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="12" column="6" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a3bed4d700851876c5f1d30416bbadceb" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and solid</definition>
        <argsstring></argsstring>
        <name>solid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="13" column="75" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a07b9ac3e448ab0a42d433d7251f330ba" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as nistp256</definition>
        <argsstring></argsstring>
        <name>nistp256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="15" column="33" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1aa517abbee5069a3b99935baae6851fa6" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as nistp384</definition>
        <argsstring></argsstring>
        <name>nistp384</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="15" column="42" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1ab01877beeb6018acf9b92439e90dc34d" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as nistp521</definition>
        <argsstring></argsstring>
        <name>nistp521</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="15" column="51" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1af17ee9b8242659ad6c9182201d8ada43" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as for which constant and researchers think it is possible <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA have ways of cracking NIST <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> It is also interesting <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> note <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> SSH belongs <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the list of protocols the NSA claims <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> be able <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> eavesdrop Having a secure replacement would make passive attacks much harder <ref refid="tests_2unittests_2CMakeLists_8txt_1adf4c50373758bd4d27d88bebdc10840e" kindref="member">if</ref> such a backdoor exists <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB[Curve25519] Its <ref refid="torture_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref> strengths are its</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as for which constant and researchers think it is possible that NSA have ways of cracking NIST curves It is also interesting to note that SSH belongs to the list of protocols the NSA claims to be able to eavesdrop Having a secure replacement would make passive attacks much harder if such a backdoor exists However an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB [Curve25519] Its main strengths are its speed</definition>
        <argsstring></argsstring>
        <name>speed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="25" column="49" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a9a40fb9a96281a1c138c63fc8b5e35d9" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as for which constant and researchers think it is possible <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA have ways of cracking NIST <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> It is also interesting <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> note <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> SSH belongs <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the list of protocols the NSA claims <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> be able <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> eavesdrop Having a secure replacement would make passive attacks much harder <ref refid="tests_2unittests_2CMakeLists_8txt_1adf4c50373758bd4d27d88bebdc10840e" kindref="member">if</ref> such a backdoor exists <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB[Curve25519] Its <ref refid="torture_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref> strengths are its its constant <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" kindref="member">time</ref> run and its lack of nebulous hard coded constants The reference version being used in this document is the one described in[Curve25519] as implemented in the library NaCl[NaCl] This document does not attempt <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> provide alternatives <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the ecdsa <ref refid="wrapper_8h_1a13a88355c3f8f273ce90235f8e562a63" kindref="member">sha1</ref> *authentication keys Key exchange The <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange procedure is very similar <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the one described chapter of[RFC5656] Public ephemeral keys are transmitted over SSH encapsulated into standard SSH strings The <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" kindref="member">following</ref> is an overview of the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as for which constant and researchers think it is possible that NSA have ways of cracking NIST curves It is also interesting to note that SSH belongs to the list of protocols the NSA claims to be able to eavesdrop Having a secure replacement would make passive attacks much harder if such a backdoor exists However an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB [Curve25519] Its main strengths are its its constant time run and its lack of nebulous hard coded constants The reference version being used in this document is the one described in [Curve25519] as implemented in the library NaCl [NaCl] This document does not attempt to provide alternatives to the ecdsa sha1* authentication keys Key exchange The key exchange procedure is very similar to the one described chapter of [RFC5656] Public ephemeral keys are transmitted over SSH encapsulated into standard SSH strings The following is an overview of the key exchange process</definition>
        <argsstring></argsstring>
        <name>process</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="40" column="50" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a6c4a12628159470391f1b922f86cc870" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as for which constant and researchers think it is possible <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA have ways of cracking NIST <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> It is also interesting <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> note <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> SSH belongs <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the list of protocols the NSA claims <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> be able <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> eavesdrop Having a secure replacement would make passive attacks much harder <ref refid="tests_2unittests_2CMakeLists_8txt_1adf4c50373758bd4d27d88bebdc10840e" kindref="member">if</ref> such a backdoor exists <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB[Curve25519] Its <ref refid="torture_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref> strengths are its its constant <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" kindref="member">time</ref> run and its lack of nebulous hard coded constants The reference version being used in this document is the one described in[Curve25519] as implemented in the library NaCl[NaCl] This document does not attempt <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> provide alternatives <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the ecdsa <ref refid="wrapper_8h_1a13a88355c3f8f273ce90235f8e562a63" kindref="member">sha1</ref> *authentication keys Key exchange The <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange procedure is very similar <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the one described chapter of[RFC5656] Public ephemeral keys are transmitted over SSH encapsulated into standard SSH strings The <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" kindref="member">following</ref> is an overview of the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange a private <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> is a scalar of</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as for which constant and researchers think it is possible that NSA have ways of cracking NIST curves It is also interesting to note that SSH belongs to the list of protocols the NSA claims to be able to eavesdrop Having a secure replacement would make passive attacks much harder if such a backdoor exists However an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB [Curve25519] Its main strengths are its its constant time run and its lack of nebulous hard coded constants The reference version being used in this document is the one described in [Curve25519] as implemented in the library NaCl [NaCl] This document does not attempt to provide alternatives to the ecdsa sha1* authentication keys Key exchange The key exchange procedure is very similar to the one described chapter of [RFC5656] Public ephemeral keys are transmitted over SSH encapsulated into standard SSH strings The following is an overview of the key exchange a private key is a scalar of bits</definition>
        <argsstring></argsstring>
        <name>bits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="69" column="32" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="69" bodyend="-1"/>
        <referencedby refid="group__libssh__session_1gac026b4aca2266e0f4ba013d9ff1fbeff" compoundref="dh_8c" startline="604" endline="630">ssh_dh_is_known_group</referencedby>
        <referencedby refid="dh__key_8c_1ab1fc518c9b0da142d693620c58f8da71" compoundref="dh__key_8c" startline="295" endline="339">ssh_dh_keypair_gen_keys</referencedby>
        <referencedby refid="bignum_8h_1a40cd92d707d2f965c852f218406420c2" compoundref="bignum_8c" startline="30" endline="64">ssh_make_bignum_string</referencedby>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1acf23df4cc7761ed915ae88187c7e028c" prot="public" static="no" mutable="no">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as for which constant and researchers think it is possible <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA have ways of cracking NIST <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> It is also interesting <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> note <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> SSH belongs <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the list of protocols the NSA claims <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> be able <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> eavesdrop Having a secure replacement would make passive attacks much harder <ref refid="tests_2unittests_2CMakeLists_8txt_1adf4c50373758bd4d27d88bebdc10840e" kindref="member">if</ref> such a backdoor exists <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB[Curve25519] Its <ref refid="torture_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref> strengths are its its constant <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" kindref="member">time</ref> run and its lack of nebulous hard coded constants The reference version being used in this document is the one described in[Curve25519] as implemented in the library NaCl[NaCl] This document does not attempt <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> provide alternatives <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the ecdsa <ref refid="wrapper_8h_1a13a88355c3f8f273ce90235f8e562a63" kindref="member">sha1</ref> *authentication keys Key exchange The <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange procedure is very similar <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the one described chapter of[RFC5656] Public ephemeral keys are transmitted over SSH encapsulated into standard SSH strings The <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" kindref="member">following</ref> is an overview of the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange a private <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> is a scalar of and a public <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> is a point of <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a6c4a12628159470391f1b922f86cc870" kindref="member">bits</ref> Private <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> generation A bytes private <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> should be generated for each new</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as for which constant and researchers think it is possible that NSA have ways of cracking NIST curves It is also interesting to note that SSH belongs to the list of protocols the NSA claims to be able to eavesdrop Having a secure replacement would make passive attacks much harder if such a backdoor exists However an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB [Curve25519] Its main strengths are its its constant time run and its lack of nebulous hard coded constants The reference version being used in this document is the one described in [Curve25519] as implemented in the library NaCl [NaCl] This document does not attempt to provide alternatives to the ecdsa sha1* authentication keys Key exchange The key exchange procedure is very similar to the one described chapter of [RFC5656] Public ephemeral keys are transmitted over SSH encapsulated into standard SSH strings The following is an overview of the key exchange a private key is a scalar of and a public key is a point of bits Private key generation A bytes private key should be generated for each new connection</definition>
        <argsstring></argsstring>
        <name>connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="74" column="55" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" prot="public" static="no" mutable="no">
        <type>In order <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> keep the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> valid</type>
        <definition>In order to keep the key valid However</definition>
        <argsstring></argsstring>
        <name>However</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="79" column="32" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" prot="public" static="no" mutable="no">
        <type>In order <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> keep the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> valid many cryptographic libraries will do this automatically It should be noted</type>
        <definition>It should be noted that</definition>
        <argsstring></argsstring>
        <name>that</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="81" column="20" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" prot="public" static="no" mutable="no">
        <type>In order <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> keep the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> valid many cryptographic libraries will do this automatically It should be noted in opposition <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> NIST</type>
        <definition>It should be noted in opposition to NIST curves</definition>
        <argsstring></argsstring>
        <name>curves</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="81" column="47" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a555595207a1407936ebb264ebdbf434c" prot="public" static="no" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char pubkey[32]</definition>
        <argsstring>[32]</argsstring>
        <name>pubkey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="93" column="20" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="93" bodyend="-1"/>
        <referencedby refid="examples_2authentication_8c_1a92d7c9e4306c6cab0efa38f402ce3d11" compoundref="examples_2authentication_8c" startline="103" endline="133">auth_keyfile</referencedby>
        <referencedby refid="ssh__server__fork_8c_1a3189cc40d6bcad5ea3c2c1edf9327672" compoundref="ssh__server__fork_8c" startline="452" endline="497">auth_publickey</referencedby>
        <referencedby refid="pki__priv_8h_1abb580d92eaeac82f200b332bb09043dd" compoundref="pki__ed25519_8c" startline="101" endline="149">pki_ed25519_verify</referencedby>
        <referencedby refid="group__libssh__pki_1ga12fb8e3141837c332165568530a1d29a" compoundref="pki_8c" startline="1100" endline="1278">pki_import_privkey_buffer</referencedby>
        <referencedby refid="group__libssh__pki_1ga47e989e47acf6d577c805910e688a21f" compoundref="pki_8c" startline="1280" endline="1458">pki_import_pubkey_buffer</referencedby>
        <referencedby refid="pki__priv_8h_1aa18a4a0bdf5ec4b3e8ae3f21875b66aa" compoundref="pki__crypto_8c" startline="1018" endline="1059">pki_privkey_build_dss</referencedby>
        <referencedby refid="pki__priv_8h_1a20a5ab35ca478b99f802d6921f8b0158" compoundref="pki__ed25519__common_8c" startline="30" endline="76">pki_privkey_build_ed25519</referencedby>
        <referencedby refid="pki__priv_8h_1a44ea17f443978628be6498fed45f4f3d" compoundref="pki__crypto_8c" startline="1061" endline="1099">pki_pubkey_build_dss</referencedby>
        <referencedby refid="pki__priv_8h_1a43d455fae80044fcef026bc6dbfd9100" compoundref="pki__crypto_8c" startline="1913" endline="1985">pki_signature_from_blob</referencedby>
        <referencedby refid="pki__crypto_8c_1ad2beac840c71e6ffb9c0dfede0704905" compoundref="pki__crypto_8c" startline="1587" endline="1654">pki_signature_from_rsa_blob</referencedby>
        <referencedby refid="pki__priv_8h_1a2ceb3135ff3591acd8db9f48fcbccec3" compoundref="pki__crypto_8c" startline="2294" endline="2407">pki_verify_data_signature</referencedby>
        <referencedby refid="legacy_8h_1addebef145f1616cf7ca774f4d398d5fb" compoundref="legacy_8c" startline="376" endline="405">publickey_from_privatekey</referencedby>
        <referencedby refid="keys_8h_1af67b178e6152d2bec58e3d20423ddfcf" compoundref="legacy_8c" startline="512" endline="541">publickey_from_string</referencedby>
        <referencedby refid="legacy_8h_1a309a2a61311f5517b3c2aedb909c81ff" compoundref="legacy_8c" startline="543" endline="573">publickey_to_string</referencedby>
        <referencedby refid="agent_8h_1ac53a1b1236f14bba793156f30686570d" compoundref="agent_8c" startline="475" endline="592">ssh_agent_sign_data</referencedby>
        <referencedby refid="dh_8h_1aa7a378b17aa0b6c175b7d90eb7527310" compoundref="dh_8c" startline="310" endline="343">ssh_client_dh_init</referencedby>
        <referencedby refid="group__libssh__session_1ga14729e84cbe765757c394f86858d250d" compoundref="dh_8c" startline="642" endline="648">ssh_dh_get_current_server_publickey_blob</referencedby>
        <referencedby refid="group__libssh__session_1ga98601c8e1c5aab3a40b6efa898fbf620" compoundref="dh_8c" startline="656" endline="662">ssh_dh_get_next_server_publickey_blob</referencedby>
        <referencedby refid="group__libssh__server_1gad7dc7022c232731badd57c92ca04f1d6" compoundref="server_8c" startline="275" endline="330">ssh_get_key_params</referencedby>
        <referencedby refid="group__libssh__session_1gaf8ff0e2236d54d964a82f68d7323a741" compoundref="session_8c" startline="972" endline="1034">ssh_get_pubkey_hash</referencedby>
        <referencedby refid="group__libssh__session_1ga5342eefee0497636e9657c968e106782" compoundref="session_8c" startline="1062" endline="1079">ssh_get_server_publickey</referencedby>
        <referencedby refid="group__libssh__session_1ga6f37e3d7bb6b938b44d6a34a76fdfa0b" compoundref="known__hosts_8c" startline="288" endline="424">ssh_is_server_known</referencedby>
        <referencedby refid="group__libssh__server_1ga2ce88786e073b36991fc96c8f6b58c09" compoundref="server_8c" startline="1003" endline="1021">ssh_message_auth_reply_pk_ok</referencedby>
        <referencedby refid="dh-gex_8c_1adbc632e797a25b2f7f39854e71dc0a49" compoundref="dh-gex_8c" startline="104" endline="239">SSH_PACKET_CALLBACK</referencedby>
        <referencedby refid="group__libssh__pki_1ga030b5e767d97bd26053a5644b083c133" compoundref="pki_8c" startline="2585" endline="2633">ssh_pki_do_sign_agent</referencedby>
        <referencedby refid="group__libssh__pki_1ga5777bc537da6a447b2a9aa9eceff9877" compoundref="pki_8c" startline="1992" endline="2008">ssh_pki_export_privkey_to_pubkey</referencedby>
        <referencedby refid="group__libssh__pki_1ga02ef62122b1d2c3065e86413cc673704" compoundref="pki_8c" startline="2241" endline="2311">ssh_pki_import_signature_blob</referencedby>
        <referencedby refid="legacy_8h_1aa4de432e122c76302e4190041fee6945" compoundref="legacy_8c" startline="575" endline="641">ssh_publickey_to_file</referencedby>
        <referencedby refid="group__libssh__auth_1ga691078be9ea2a55fed97c7488395af5a" compoundref="auth_8c" startline="726" endline="825">ssh_userauth_agent_publickey</referencedby>
        <referencedby refid="legacy_8h_1ad965ac950503a78de974cd01ecfe2fc6" compoundref="legacy_8c" startline="101" endline="141">ssh_userauth_privatekey_file</referencedby>
        <referencedby refid="group__libssh__auth_1ga592f673c4d417a6a46cd4876ac8287aa" compoundref="auth_8c" startline="489" endline="584">ssh_userauth_try_publickey</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1afe74d49653a147fe1b5a382771a45cca" compoundref="torture__pki__dsa_8c" startline="233" endline="259">test_sign_verify_data</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a5a32a47ceac7d0b260b61c94cc1dcced" compoundref="torture__threads__pki__rsa_8c" startline="341" endline="401">thread_pki_rsa_copy_cert_to_privkey</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a2a6a4a9e023d5a80a2b834581a65fe67" compoundref="torture__threads__pki__rsa_8c" startline="498" endline="549">thread_pki_rsa_duplicate_key</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a5120f10dc6b7e2a6bc4271fda92fdfc0" compoundref="torture__threads__pki__rsa_8c" startline="562" endline="632">thread_pki_rsa_generate_key</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a6914814f232f65e3a70d6b54814c74a3" compoundref="torture__threads__pki__rsa_8c" startline="167" endline="182">thread_pki_rsa_import_pubkey_file</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a4ae0f40f771918d46519cb0035b73c68" compoundref="torture__threads__pki__rsa_8c" startline="298" endline="328">thread_pki_rsa_publickey_from_privatekey</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a9ee76976e73eee08438fb0549bb11812" compoundref="torture__pki__ecdsa__uri_8c" startline="234" endline="292">torture_ecdsa_sign_verify_uri</referencedby>
        <referencedby refid="torture__key_8c_1a8c594ae5188a714baf076446240e76ff" compoundref="torture__key_8c" startline="686" endline="834">torture_get_testkey_internal</referencedby>
        <referencedby refid="torture__hashes_8c_1aa4c244cbfaefd1313f9875c4e137c4a0" compoundref="torture__hashes_8c" startline="52" endline="79">torture_md5_hash</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1abe227bbc04a742000387332d4c69efec" compoundref="torture__pki__dsa_8c" startline="741" endline="794">torture_pki_dsa_duplicate_key</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a3a7f16381e525e9566512ba1e1c8246c" compoundref="torture__pki__dsa_8c" startline="796" endline="847">torture_pki_dsa_generate_key</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a7a8dc756ca36c97ff595b7920e78141a" compoundref="torture__pki__dsa_8c" startline="699" endline="739">torture_pki_dsa_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a9e4847cf17b97dff543717bef43da74e" compoundref="torture__pki__dsa_8c" startline="123" endline="136">torture_pki_dsa_import_pubkey_file</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a9526eb4bc0b8a5b217d9828bcf6fc722" compoundref="torture__pki__dsa_8c" startline="138" endline="151">torture_pki_dsa_import_pubkey_from_openssh_privkey</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a0a6fa4733728936d1fabe83fba82e154" compoundref="torture__pki__dsa_8c" startline="597" endline="623">torture_pki_dsa_publickey_from_privatekey</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a3ff741aec05b5ebfd2928a583cbd1378" compoundref="torture__pki__ecdsa_8c" startline="440" endline="493">torture_pki_ecdsa_duplicate_key</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a1933c5e98dba4fdad39cc12f278adb1b" compoundref="torture__pki__ecdsa__uri_8c" startline="309" endline="362">torture_pki_ecdsa_duplicate_key_uri</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a854b2a3514e34d272accac3d6b2fef4c" compoundref="torture__pki__ecdsa_8c" startline="499" endline="528">torture_pki_ecdsa_duplicate_then_demote</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1ad45c9caf1679927ed718f230f327e11c" compoundref="torture__pki__ecdsa__uri_8c" startline="379" endline="408">torture_pki_ecdsa_duplicate_then_demote_uri</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a22ba49e4dec6d610c2e484ae909fb205" compoundref="torture__pki__ecdsa_8c" startline="395" endline="438">torture_pki_ecdsa_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a710bccbd6fbdd97c6e6fd541a0e32d33" compoundref="torture__pki__ecdsa_8c" startline="191" endline="204">torture_pki_ecdsa_import_pubkey_file</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1ae3980eb448fdfe916fc6abc34580aec0" compoundref="torture__pki__ecdsa_8c" startline="206" endline="219">torture_pki_ecdsa_import_pubkey_from_openssh_privkey</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a32d7d970ce0d02a8fceb08d932b29ccf" compoundref="torture__pki__ecdsa__uri_8c" startline="129" endline="142">torture_pki_ecdsa_import_pubkey_uri</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a601e62b6c9f93bad682c37af13204a5a" compoundref="torture__pki__ecdsa__uri_8c" startline="425" endline="462">torture_pki_ecdsa_import_pubkey_uri_invalid_configurations</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a678bb5fc3cb7cdb348b28871b4235fee" compoundref="torture__pki__ecdsa_8c" startline="307" endline="331">torture_pki_ecdsa_publickey_from_privatekey</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a009cf2bdaeaeb2d0645e7ef26aa0f68a" compoundref="torture__pki__ecdsa__uri_8c" startline="159" endline="217">torture_pki_ecdsa_publickey_from_privatekey_uri</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1ac85e7b533420e07088bea89f9a38cb8c" compoundref="torture__pki__ed25519_8c" startline="417" endline="466">torture_pki_ed25519_generate_key</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a3cd812d589795ecc52564cbfb198c12f" compoundref="torture__pki__ed25519_8c" startline="376" endline="415">torture_pki_ed25519_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1ab72be9104455e87c96e57174a287565d" compoundref="torture__pki__ed25519_8c" startline="91" endline="104">torture_pki_ed25519_import_pubkey_file</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1adcfd797d85798962f84fff9d220031a0" compoundref="torture__pki__ed25519_8c" startline="106" endline="119">torture_pki_ed25519_import_pubkey_from_openssh_privkey</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1ada408f06faa6967764642615f5a0aad8" compoundref="torture__pki__ed25519_8c" startline="935" endline="971">torture_pki_ed25519_pubkey_dup</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a8328b6d25f6dfae58e50cc93a7bc22d2" compoundref="torture__pki__ed25519_8c" startline="282" endline="310">torture_pki_ed25519_publickey_from_privatekey</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1af1e2eec9a6e622023a0ecd76a8594d0a" compoundref="torture__pki__ed25519_8c" startline="771" endline="823">torture_pki_ed25519_verify</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a7400cc5f396c94ebac144ed695d14b1c" compoundref="torture__pki__ed25519_8c" startline="825" endline="870">torture_pki_ed25519_verify_bad</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1aeb9b635fa1bca84231db7359903fdbfb" compoundref="torture__pki__dsa_8c" startline="281" endline="348">torture_pki_fail_sign_with_incompatible_hash</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1abd1281bee9d18802bdf7ffda89e9be54" compoundref="torture__pki__ecdsa_8c" startline="530" endline="671">torture_pki_generate_key_ecdsa</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a9334f4d96d8fa8d3f99a66b469f32bf5" compoundref="torture__pki__rsa_8c" startline="320" endline="378">torture_pki_rsa_copy_cert_to_privkey</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a3d12fe416f1767eabd0e141b831d4b61" compoundref="torture__pki__rsa_8c" startline="484" endline="537">torture_pki_rsa_duplicate_key</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a032833c4f71125596cc5f99ea0d63c4f" compoundref="torture__pki__rsa_8c" startline="539" endline="598">torture_pki_rsa_generate_key</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1af09fa6043d2157e4244c66bd9e964cbf" compoundref="torture__pki__rsa_8c" startline="443" endline="482">torture_pki_rsa_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1aa9163624ee8e5a1ed17449a20738604c" compoundref="torture__pki__rsa_8c" startline="124" endline="137">torture_pki_rsa_import_pubkey_file</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a14f407ae92f63906e5ca6da02af6c04f" compoundref="torture__pki__rsa_8c" startline="139" endline="152">torture_pki_rsa_import_pubkey_from_openssh_privkey</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1a1174788d3e5aa595f90c16dc8ae87f5c" compoundref="torture__pki__rsa__uri_8c" startline="150" endline="163">torture_pki_rsa_import_pubkey_uri</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1abdc3cf3b48b89e64dfe7caaaaf933af1" compoundref="torture__pki__rsa_8c" startline="292" endline="318">torture_pki_rsa_publickey_from_privatekey</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1ab61a809ec9584ed27a72e8232dcdf853" compoundref="torture__pki__rsa__uri_8c" startline="219" endline="243">torture_pki_rsa_publickey_from_privatekey_uri</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a7f78789af8cfaeac28ad6537ad1403af" compoundref="torture__pki__rsa_8c" startline="600" endline="666">torture_pki_rsa_sha2</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1a5a815af08fd677f38bc20c97608df782" compoundref="torture__pki__rsa__uri_8c" startline="245" endline="279">torture_pki_rsa_uri_invalid_configurations</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1a6087333e472cde48dcf4ec7aa6c2b78e" compoundref="torture__pki__rsa__uri_8c" startline="186" endline="217">torture_pki_sign_verify_uri</referencedby>
        <referencedby refid="unittests_2torture__pki_8c_1ae33c259d4f65da47ee3901653e1ec8bc" compoundref="unittests_2torture__pki_8c" startline="251" endline="430">torture_pki_verify_mismatch</referencedby>
        <referencedby refid="torture__keyfiles_8c_1a440abcb0520243cda4ade8dc57ec08dc" compoundref="torture__keyfiles_8c" startline="105" endline="133">torture_pubkey_from_file</referencedby>
        <referencedby refid="torture__keyfiles_8c_1a7e9f71416fd72025a04f85251652b355" compoundref="torture__keyfiles_8c" startline="157" endline="222">torture_pubkey_generate_from_privkey</referencedby>
        <referencedby refid="torture__pki_8c_1a0afdc77a108f75aaa1e2afc38f584149" compoundref="torture__pki_8c" startline="89" endline="102">torture_pubkey_len</referencedby>
        <referencedby refid="torture__hashes_8c_1ae6a089b8a29d47bb83feb13b577f7e21" compoundref="torture__hashes_8c" startline="81" endline="98">torture_sha1_hash</referencedby>
        <referencedby refid="torture__hashes_8c_1a7d6d03a2483bbfd42a521edea581044b" compoundref="torture__hashes_8c" startline="120" endline="142">torture_sha256_fingerprint</referencedby>
        <referencedby refid="torture__hashes_8c_1aae6590b5c29c9ce2e9b20d9893cd5c7e" compoundref="torture__hashes_8c" startline="100" endline="118">torture_sha256_hash</referencedby>
        <referencedby refid="classssh_1_1Session_1afb635d7f84b000bbabb09a86ad5ad074" compoundref="libsshpp_8hpp" startline="271" endline="275">ssh::Session::userauthTryPublickey</referencedby>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a7a7f57a53d58d3bb7fcdec4c55efa962" prot="public" static="no" mutable="no">
        <type><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> some cryptographic libraries may provide a combined</type>
        <definition>However some cryptographic libraries may provide a combined function</definition>
        <argsstring></argsstring>
        <name>function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="95" column="61" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a5d18fd02a76effa0a15b1decb554cc12" prot="public" static="no" mutable="no">
        <type><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> some cryptographic libraries may provide a combined</type>
        <definition>However some cryptographic libraries may provide a combined privkey</definition>
        <argsstring></argsstring>
        <name>privkey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="96" column="2" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="96" bodyend="-1"/>
        <referencedby refid="group__libssh__pki_1gaea610620302daa9b146dcd676ebdb2ec" compoundref="pki_8c" startline="2486" endline="2506">pki_do_sign</referencedby>
        <referencedby refid="pki__priv_8h_1a5d01210942950f8d6bb14c242c7f8478" compoundref="pki__crypto_8c" startline="2495" endline="2526">pki_do_sign_hash</referencedby>
        <referencedby refid="pki__priv_8h_1a456b31fe92a5fc2fabcd8a5ec2c87e3c" compoundref="pki__ed25519_8c" startline="59" endline="99">pki_ed25519_sign</referencedby>
        <referencedby refid="group__libssh__pki_1ga12fb8e3141837c332165568530a1d29a" compoundref="pki_8c" startline="1100" endline="1278">pki_import_privkey_buffer</referencedby>
        <referencedby refid="group__libssh__pki_1gae31fc9d1d7202ca99b444d6b8159cabb" compoundref="pki__container__openssh_8c" startline="404" endline="426">pki_openssh_export_privkey_blob</referencedby>
        <referencedby refid="pki__priv_8h_1aa18a4a0bdf5ec4b3e8ae3f21875b66aa" compoundref="pki__crypto_8c" startline="1018" endline="1059">pki_privkey_build_dss</referencedby>
        <referencedby refid="pki__priv_8h_1a20a5ab35ca478b99f802d6921f8b0158" compoundref="pki__ed25519__common_8c" startline="30" endline="76">pki_privkey_build_ed25519</referencedby>
        <referencedby refid="pki__priv_8h_1a9d88e1b6e93f81dc11ebded5384646e3" compoundref="pki__crypto_8c" startline="2139" endline="2279">pki_sign_data</referencedby>
        <referencedby refid="legacy_8h_1aeefbb89886bd9313642b80ed4b006858" compoundref="legacy_8c" startline="407" endline="450">privatekey_from_file</referencedby>
        <referencedby refid="legacy_8h_1addebef145f1616cf7ca774f4d398d5fb" compoundref="legacy_8c" startline="376" endline="405">publickey_from_privatekey</referencedby>
        <referencedby refid="group__libssh__server_1gad7dc7022c232731badd57c92ca04f1d6" compoundref="server_8c" startline="275" endline="330">ssh_get_key_params</referencedby>
        <referencedby refid="group__libssh__pki_1gacf3c14fbfaa1e0b1aa3d4129bad07fb8" compoundref="pki_8c" startline="1084" endline="1098">ssh_pki_convert_key_to_privatekey</referencedby>
        <referencedby refid="group__libssh__pki_1ga71432844d5d210d63a92acff86f91e90" compoundref="pki_8c" startline="2153" endline="2183">ssh_pki_copy_cert_to_privkey</referencedby>
        <referencedby refid="group__libssh__pki_1gab366c5e63b468061d201397939bc6a82" compoundref="pki_8c" startline="2511" endline="2582">ssh_pki_do_sign</referencedby>
        <referencedby refid="group__libssh__pki_1ga320970245fa4e3ab873888b581e13378" compoundref="pki_8c" startline="841" endline="878">ssh_pki_export_privkey_base64</referencedby>
        <referencedby refid="group__libssh__pki_1ga3b294c44e2280c935cb0b82ede5c42ee" compoundref="pki_8c" startline="1001" endline="1048">ssh_pki_export_privkey_file</referencedby>
        <referencedby refid="group__libssh__pki_1ga5777bc537da6a447b2a9aa9eceff9877" compoundref="pki_8c" startline="1992" endline="2008">ssh_pki_export_privkey_to_pubkey</referencedby>
        <referencedby refid="pki__priv_8h_1a0a1b01b666de3e4f433660761c7658ad" compoundref="pki__container__openssh_8c" startline="534" endline="722">ssh_pki_openssh_privkey_export</referencedby>
        <referencedby refid="legacy_8h_1ad965ac950503a78de974cd01ecfe2fc6" compoundref="legacy_8c" startline="101" endline="141">ssh_userauth_privatekey_file</referencedby>
        <referencedby refid="group__libssh__auth_1gaa38c4f3194ef36720da7eddb0aa99e23" compoundref="auth_8c" startline="609" endline="723">ssh_userauth_publickey</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a5a32a47ceac7d0b260b61c94cc1dcced" compoundref="torture__threads__pki__rsa_8c" startline="341" endline="401">thread_pki_rsa_copy_cert_to_privkey</referencedby>
        <referencedby refid="torture__threads__pki__rsa_8c_1a2a6a4a9e023d5a80a2b834581a65fe67" compoundref="torture__threads__pki__rsa_8c" startline="498" endline="549">thread_pki_rsa_duplicate_key</referencedby>
        <referencedby refid="torture__auth_8c_1a3dc15f1542313d7536ea949a57ed8d0b" compoundref="torture__auth_8c" startline="498" endline="544">torture_auth_cert</referencedby>
        <referencedby refid="torture__auth_8c_1aef29b45c88fd31e623e989959a72a434" compoundref="torture__auth_8c" startline="672" endline="728">torture_auth_pubkey_types_ed25519</referencedby>
        <referencedby refid="torture__auth_8c_1a6f2cc3f2514eaf5b14e030490d6993f3" compoundref="torture__auth_8c" startline="824" endline="888">torture_auth_pubkey_types_ed25519_nonblocking</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a9ee76976e73eee08438fb0549bb11812" compoundref="torture__pki__ecdsa__uri_8c" startline="234" endline="292">torture_ecdsa_sign_verify_uri</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a365fc8d8fc9d1c87ef28bb0237eab569" compoundref="torture__pki__dsa_8c" startline="849" endline="878">torture_pki_dsa_cert_verify</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1abe227bbc04a742000387332d4c69efec" compoundref="torture__pki__dsa_8c" startline="741" endline="794">torture_pki_dsa_duplicate_key</referencedby>
        <referencedby refid="torture__pki__dsa_8c_1a7a8dc756ca36c97ff595b7920e78141a" compoundref="torture__pki__dsa_8c" startline="699" endline="739">torture_pki_dsa_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a01213a3d8de9d267a4170272c0099b60" compoundref="torture__pki__ecdsa_8c" startline="673" endline="706">torture_pki_ecdsa_cert_verify</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a3ff741aec05b5ebfd2928a583cbd1378" compoundref="torture__pki__ecdsa_8c" startline="440" endline="493">torture_pki_ecdsa_duplicate_key</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a1933c5e98dba4fdad39cc12f278adb1b" compoundref="torture__pki__ecdsa__uri_8c" startline="309" endline="362">torture_pki_ecdsa_duplicate_key_uri</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a854b2a3514e34d272accac3d6b2fef4c" compoundref="torture__pki__ecdsa_8c" startline="499" endline="528">torture_pki_ecdsa_duplicate_then_demote</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1ad45c9caf1679927ed718f230f327e11c" compoundref="torture__pki__ecdsa__uri_8c" startline="379" endline="408">torture_pki_ecdsa_duplicate_then_demote_uri</referencedby>
        <referencedby refid="torture__pki__ecdsa_8c_1a22ba49e4dec6d610c2e484ae909fb205" compoundref="torture__pki__ecdsa_8c" startline="395" endline="438">torture_pki_ecdsa_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a601e62b6c9f93bad682c37af13204a5a" compoundref="torture__pki__ecdsa__uri_8c" startline="425" endline="462">torture_pki_ecdsa_import_pubkey_uri_invalid_configurations</referencedby>
        <referencedby refid="torture__pki__ecdsa__uri_8c_1a009cf2bdaeaeb2d0645e7ef26aa0f68a" compoundref="torture__pki__ecdsa__uri_8c" startline="159" endline="217">torture_pki_ecdsa_publickey_from_privatekey_uri</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a75be26ab9888c37ea2ebc786279e26d6" compoundref="torture__pki__ed25519_8c" startline="468" endline="504">torture_pki_ed25519_cert_verify</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a3cd812d589795ecc52564cbfb198c12f" compoundref="torture__pki__ed25519_8c" startline="376" endline="415">torture_pki_ed25519_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a63c53094e403b5f30bef82d88d8cfa0e" compoundref="torture__pki__ed25519_8c" startline="615" endline="653">torture_pki_ed25519_sign</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a7c43047841f165a1d26b8f7bec75a6b7" compoundref="torture__pki__ed25519_8c" startline="655" endline="691">torture_pki_ed25519_sign_openssh_privkey_passphrase</referencedby>
        <referencedby refid="torture__pki__ed25519_8c_1a6e3b70e6d88630aaf31ba4758b2b1a69" compoundref="torture__pki__ed25519_8c" startline="506" endline="613">torture_pki_ed25519_write_privkey</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a9334f4d96d8fa8d3f99a66b469f32bf5" compoundref="torture__pki__rsa_8c" startline="320" endline="378">torture_pki_rsa_copy_cert_to_privkey</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1a3d12fe416f1767eabd0e141b831d4b61" compoundref="torture__pki__rsa_8c" startline="484" endline="537">torture_pki_rsa_duplicate_key</referencedby>
        <referencedby refid="torture__pki__rsa_8c_1af09fa6043d2157e4244c66bd9e964cbf" compoundref="torture__pki__rsa_8c" startline="443" endline="482">torture_pki_rsa_generate_pubkey_from_privkey</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1a293308f32b6ba58490e707af97f95d5b" compoundref="torture__pki__rsa__uri_8c" startline="165" endline="183">torture_pki_rsa_import_privkey_uri</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1ab61a809ec9584ed27a72e8232dcdf853" compoundref="torture__pki__rsa__uri_8c" startline="219" endline="243">torture_pki_rsa_publickey_from_privatekey_uri</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1a5a815af08fd677f38bc20c97608df782" compoundref="torture__pki__rsa__uri_8c" startline="245" endline="279">torture_pki_rsa_uri_invalid_configurations</referencedby>
        <referencedby refid="torture__pki__rsa__uri_8c_1a6087333e472cde48dcf4ec7aa6c2b78e" compoundref="torture__pki__rsa__uri_8c" startline="186" endline="217">torture_pki_sign_verify_uri</referencedby>
        <referencedby refid="torture__keyfiles_8c_1a7e9f71416fd72025a04f85251652b355" compoundref="torture__keyfiles_8c" startline="157" endline="222">torture_pubkey_generate_from_privkey</referencedby>
        <referencedby refid="classssh_1_1Session_1a6dd49ee38bf24c31c5e0e28dc2af07b7" compoundref="libsshpp_8hpp" startline="282" endline="286">ssh::Session::userauthPublickey</referencedby>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a96f3771c9ce4da5c403a696ad3065c14" prot="public" static="no" mutable="no">
        <type>It should be noted in opposition <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> NIST no special validation should be done <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> ensure the received public keys are valid <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> point The Curve25519 algorithm ensure <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> every possible public <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> maps <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> a valid ECC Point Shared secret generation The shared</type>
        <definition>It should be noted in opposition to NIST no special validation should be done to ensure the received public keys are valid curves point The Curve25519 algorithm ensure that every possible public key maps to a valid ECC Point Shared secret generation The shared secret</definition>
        <argsstring></argsstring>
        <name>secret</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="105" column="12" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="curve25519-sha256_0dlibssh_8org_8txt_1a4c5b7e7f9974ccd012409eb6e21dc655" prot="public" static="no" mutable="no">
        <type>It should be noted in opposition <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> NIST no special validation should be done <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> ensure the received public keys are valid <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> point The Curve25519 algorithm ensure <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> every possible public <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> maps <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> a valid ECC Point Shared <ref refid="torture__session__keys_8c_1a9f35b3cca5739971c612ada91701975b" kindref="member">secret</ref> generation The shared</type>
        <definition>It should be noted in opposition to NIST no special validation should be done to ensure the received public keys are valid curves point The Curve25519 algorithm ensure that every possible public key maps to a valid ECC Point Shared secret generation The shared k</definition>
        <argsstring></argsstring>
        <name>k</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="105" column="19" bodyfile="doc/curve25519-sha256@libssh.org.txt" bodystart="105" bodyend="-1"/>
        <referencedby refid="blf_8h_1aa8cce9af3a19e8bc8484e147233f4b5a" compoundref="blowfish_8c" startline="423" endline="457">Blowfish_expand0state</referencedby>
        <referencedby refid="blf_8h_1aaab094bba44b8d36b4201ba7f1ce685c" compoundref="blowfish_8c" startline="461" endline="501">Blowfish_expandstate</referencedby>
        <referencedby refid="chacha_8h_1a801923213f8e866ccec6c39ef15d50eb" compoundref="chacha_8c" startline="53" endline="75">chacha_keysetup</referencedby>
        <referencedby refid="blf_8h_1a2d76d226fac836aeb26301c30b4cbf67" compoundref="blowfish_8c" startline="504" endline="511">ssh_blf_key</referencedby>
        <referencedby refid="group__libssh__session_1ga85ab9f031ff137ad3f9e14341b514f5b" compoundref="dh_8c" startline="678" endline="694">ssh_get_b64_unpadded</referencedby>
        <referencedby refid="group__libssh__pki_1ga09de68aba0a7c4e31d8ba7df43b637c5" compoundref="pki_8c" startline="636" endline="642">ssh_key_is_private</referencedby>
        <referencedby refid="group__libssh__pki_1ga9bc688b5cbc400320ac44896eba21924" compoundref="pki_8c" startline="621" endline="627">ssh_key_is_public</referencedby>
        <referencedby refid="torture__threads__buffer_8c_1a507db24a756e383887921fe13f9bc20e" compoundref="torture__threads__buffer_8c" startline="219" endline="258">thread_ssh_buffer_get_ssh_string</referencedby>
        <referencedby refid="torture__buffer_8c_1a61af67c27c79501074300baad8637fa2" compoundref="torture__buffer_8c" startline="104" endline="134">torture_ssh_buffer_get_ssh_string</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="curve25519-sha256_0dlibssh_8org_8txt_1a4165b615aed4bbc94b92bc703e787dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some people</definition>
        <argsstring>(including Bruce Schneier[SCHNEIER])</argsstring>
        <name>people</name>
        <param>
          <type>including Bruce</type>
          <declname>Schneier</declname>
          <array>[SCHNEIER]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="14" column="6"/>
      </memberdef>
      <memberdef kind="function" id="curve25519-sha256_0dlibssh_8org_8txt_1a709f4af265712fed2429866ff31bb816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as for which constant</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as for which constant parameters</definition>
        <argsstring>(including the generator point) are defined without explanation. It is also believed that NSA had a word to say in their definition. These curves are not the most secure or fastest possible for their key sizes[DJB]</argsstring>
        <name>parameters</name>
        <param>
          <type>including the generator</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org txt Aris Adamantiadis&lt; aris @badcode.be &gt; Introduction This document describes the <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange methode curve25519 <ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref> libssh org for SSH version protocol It is provided as an alternative <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the existing <ref refid="torture__threads__crypto_8c_1a20fdb572f00a1f6473133a60344f9369" kindref="member">key</ref> exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman[RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA willingly inserts backdoors into hardware components and published standards While it is still believed <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> such as for which constant and researchers think it is possible <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> NSA have ways of cracking NIST <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref> It is also interesting <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> note <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref> SSH belongs <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> the list of protocols the NSA claims <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> be able <ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref> eavesdrop Having a secure replacement would make passive attacks much harder <ref refid="tests_2unittests_2CMakeLists_8txt_1adf4c50373758bd4d27d88bebdc10840e" kindref="member">if</ref> such a backdoor exists <ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" kindref="member">However</ref> an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB[Curve25519] Its <ref refid="torture_8c_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref> strengths are its its constant time run</type>
        <definition>curve25519 sha256 libssh org txt Aris Adamantiadis&lt;aris@badcode.be&gt; Introduction This document describes the key exchange methode curve25519 sha256 libssh org for SSH version protocol It is provided as an alternative to the existing key exchange mechanisms based on either Diffie Hellman or Elliptic Curve Diffie Hellman [RFC5656] The reason is the revelations from ex consultant at NSA Edward Snowden gave proof that NSA willingly inserts backdoors into hardware components and published standards While it is still believed that the mathematics behind ECC cryptography are still sound and some showed their lack of confidence in NIST published curves such as for which constant and researchers think it is possible that NSA have ways of cracking NIST curves It is also interesting to note that SSH belongs to the list of protocols the NSA claims to be able to eavesdrop Having a secure replacement would make passive attacks much harder if such a backdoor exists However an alternative exists in the form of Curve25519 This algorithm has been proposed in by DJB [Curve25519] Its main strengths are its its constant time run time</definition>
        <argsstring>(and resistance against side-channel attacks)</argsstring>
        <name>time</name>
        <param>
          <type>and resistance against side-channel</type>
          <declname>attacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="26" column="18"/>
        <referencedby refid="sftp__stress_2main_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="sftp__stress_2main_8c" startline="54" endline="74">main</referencedby>
        <referencedby refid="group__libssh__misc_1gaacd48b33d4b9e0934a0e2819340aa033" compoundref="misc_8c" startline="1747" endline="1787">ssh_tmpname</referencedby>
        <referencedby refid="torture__rekey_8c_1a83928e03d85a04fd06d4c4a0ca9c7394" compoundref="torture__rekey_8c" startline="324" endline="388">torture_rekey_time</referencedby>
      </memberdef>
      <memberdef kind="function" id="curve25519-sha256_0dlibssh_8org_8txt_1a04d9d016559645d1eb244093532263e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>crypto_scalarmult</definition>
        <argsstring>(pubkey, privkey, basepoint)</argsstring>
        <name>crypto_scalarmult</name>
        <param>
          <type><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a555595207a1407936ebb264ebdbf434c" kindref="member">pubkey</ref></type>
        </param>
        <param>
          <type><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a5d18fd02a76effa0a15b1decb554cc12" kindref="member">privkey</ref></type>
        </param>
        <param>
          <type><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1ab526bdf21603db5d6df24cbe34edc3d7" kindref="member">basepoint</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="doc/curve25519-sha256@libssh.org.txt" line="94" column="6" declfile="doc/curve25519-sha256@libssh.org.txt" declline="94" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">curve25519-<ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref>@libssh.org.txt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aris<sp/>Adamantiadis<sp/>&lt;aris@badcode.be&gt;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21/9/2013</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">1.<sp/>Introduction</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">This<sp/>document<sp/>describes<sp/>the<sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>exchange<sp/>methode<sp/>curve25519-<ref refid="wrapper_8h_1ae6cc8bca6f3cd36da02b85c3fbffaf12" kindref="member">sha256</ref>@libssh.org</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>SSH<sp/>version<sp/>2<sp/>protocol.<sp/>It<sp/>is<sp/>provided<sp/>as<sp/>an<sp/>alternative<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>the<sp/>existing</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>exchange<sp/>mechanisms<sp/>based<sp/>on<sp/>either<sp/>Diffie-Hellman<sp/>or<sp/>Elliptic<sp/>Curve<sp/>Diffie-</highlight></codeline>
<codeline lineno="9"><highlight class="normal">Hellman<sp/>[RFC5656].</highlight></codeline>
<codeline lineno="10" refid="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" refkind="member"><highlight class="normal">The<sp/>reason<sp/>is<sp/>the<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" kindref="member">following</ref><sp/>:<sp/>During<sp/>summer<sp/>of<sp/>2013,<sp/>revelations<sp/>from<sp/>ex-</highlight></codeline>
<codeline lineno="11"><highlight class="normal">consultant<sp/>at<sp/>NSA<sp/>Edward<sp/>Snowden<sp/>gave<sp/>proof<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/>NSA<sp/>willingly<sp/>inserts<sp/>backdoors</highlight></codeline>
<codeline lineno="12" refid="curve25519-sha256_0dlibssh_8org_8txt_1ab22c0f1ae13657fbafcee1043f715cc2" refkind="member"><highlight class="normal">into<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1ab22c0f1ae13657fbafcee1043f715cc2" kindref="member">softwares</ref>,<sp/>hardware<sp/>components<sp/>and<sp/>published<sp/>standards.<sp/>While<sp/>it<sp/>is<sp/>still</highlight></codeline>
<codeline lineno="13" refid="curve25519-sha256_0dlibssh_8org_8txt_1a3bed4d700851876c5f1d30416bbadceb" refkind="member"><highlight class="normal">believed<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/>the<sp/>mathematics<sp/>behind<sp/>ECC<sp/>cryptography<sp/>are<sp/>still<sp/>sound<sp/>and<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a3bed4d700851876c5f1d30416bbadceb" kindref="member">solid</ref>,</highlight></codeline>
<codeline lineno="14" refid="curve25519-sha256_0dlibssh_8org_8txt_1a4165b615aed4bbc94b92bc703e787dd3" refkind="member"><highlight class="normal">some<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a4165b615aed4bbc94b92bc703e787dd3" kindref="member">people</ref><sp/>(including<sp/>Bruce<sp/>Schneier<sp/>[SCHNEIER]),<sp/>showed<sp/>their<sp/>lack<sp/>of<sp/>confidence</highlight></codeline>
<codeline lineno="15" refid="curve25519-sha256_0dlibssh_8org_8txt_1a07b9ac3e448ab0a42d433d7251f330ba" refkind="member"><highlight class="normal">in<sp/>NIST-published<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref><sp/>such<sp/>as<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a07b9ac3e448ab0a42d433d7251f330ba" kindref="member">nistp256</ref>,<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1aa517abbee5069a3b99935baae6851fa6" kindref="member">nistp384</ref>,<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1ab01877beeb6018acf9b92439e90dc34d" kindref="member">nistp521</ref>,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>which<sp/>constant</highlight></codeline>
<codeline lineno="16" refid="curve25519-sha256_0dlibssh_8org_8txt_1a709f4af265712fed2429866ff31bb816" refkind="member"><highlight class="normal"><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a709f4af265712fed2429866ff31bb816" kindref="member">parameters</ref><sp/>(including<sp/>the<sp/>generator<sp/>point)<sp/>are<sp/>defined<sp/>without<sp/>explanation.<sp/>It</highlight></codeline>
<codeline lineno="17"><highlight class="normal">is<sp/>also<sp/>believed<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/>NSA<sp/>had<sp/><ref refid="namespacegenerate_1a3bb1e673073a90dc0b8d1659852706e3" kindref="member">a</ref><sp/>word<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>say<sp/>in<sp/>their<sp/>definition.<sp/>These<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal">are<sp/>not<sp/>the<sp/>most<sp/>secure<sp/>or<sp/>fastest<sp/>possible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>their<sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>sizes<sp/>[DJB],<sp/>and</highlight></codeline>
<codeline lineno="19"><highlight class="normal">researchers<sp/>think<sp/>it<sp/>is<sp/>possible<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/>NSA<sp/>have<sp/>ways<sp/>of<sp/>cracking<sp/>NIST<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" kindref="member">curves</ref>.</highlight></codeline>
<codeline lineno="20"><highlight class="normal">It<sp/>is<sp/>also<sp/>interesting<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>note<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/>SSH<sp/>belongs<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>the<sp/>list<sp/>of<sp/>protocols<sp/>the<sp/>NSA</highlight></codeline>
<codeline lineno="21"><highlight class="normal">claims<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>be<sp/>able<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>eavesdrop.<sp/>Having<sp/><ref refid="namespacegenerate_1a3bb1e673073a90dc0b8d1659852706e3" kindref="member">a</ref><sp/>secure<sp/>replacement<sp/>would<sp/>make<sp/>passive</highlight></codeline>
<codeline lineno="22"><highlight class="normal">attacks<sp/>much<sp/>harder<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>such<sp/><ref refid="namespacegenerate_1a3bb1e673073a90dc0b8d1659852706e3" kindref="member">a</ref><sp/>backdoor<sp/>exists.</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">However<sp/>an<sp/>alternative<sp/>exists<sp/>in<sp/>the<sp/>form<sp/>of<sp/>Curve25519.<sp/>This<sp/>algorithm<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="25" refid="curve25519-sha256_0dlibssh_8org_8txt_1af17ee9b8242659ad6c9182201d8ada43" refkind="member"><highlight class="normal">proposed<sp/>in<sp/>2006<sp/>by<sp/>DJB<sp/>[Curve25519].<sp/>Its<sp/><ref refid="exec_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref><sp/>strengths<sp/>are<sp/>its<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1af17ee9b8242659ad6c9182201d8ada43" kindref="member">speed</ref>,<sp/>its</highlight></codeline>
<codeline lineno="26" refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" refkind="member"><highlight class="normal">constant-<ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" kindref="member">time</ref><sp/>run<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a64e3b3da47d2dcb5585763c1a7036884" kindref="member">time</ref><sp/>(and<sp/>resistance<sp/>against<sp/>side-channel<sp/>attacks),<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="27"><highlight class="normal">lack<sp/>of<sp/>nebulous<sp/>hard-coded<sp/>constants.</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">The<sp/>reference<sp/>version<sp/>being<sp/>used<sp/>in<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>document<sp/>is<sp/>the<sp/>one<sp/>described<sp/>in</highlight></codeline>
<codeline lineno="30"><highlight class="normal">[Curve25519]<sp/>as<sp/>implemented<sp/>in<sp/>the<sp/>library<sp/>NaCl<sp/>[NaCl].</highlight></codeline>
<codeline lineno="31"><highlight class="normal">This<sp/>document<sp/>does<sp/>not<sp/>attempt<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>provide<sp/>alternatives<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>the<sp/>ecdsa-<ref refid="wrapper_8h_1a13a88355c3f8f273ce90235f8e562a63" kindref="member">sha1</ref>-*</highlight></codeline>
<codeline lineno="32"><highlight class="normal">authentication<sp/>keys.</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">2.<sp/>Key<sp/>exchange</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">The<sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>exchange<sp/>procedure<sp/>is<sp/>very<sp/>similar<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>the<sp/>one<sp/>described<sp/>chapter<sp/>4<sp/>of</highlight></codeline>
<codeline lineno="37"><highlight class="normal">[RFC5656].<sp/>Public<sp/>ephemeral<sp/>keys<sp/>are<sp/>transmitted<sp/>over<sp/>SSH<sp/>encapsulated<sp/>into</highlight></codeline>
<codeline lineno="38"><highlight class="normal">standard<sp/>SSH<sp/>strings.</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="curve25519-sha256_0dlibssh_8org_8txt_1a9a40fb9a96281a1c138c63fc8b5e35d9" refkind="member"><highlight class="normal">The<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a5480bc6794101578b08bf74140eec5f1" kindref="member">following</ref><sp/>is<sp/>an<sp/>overview<sp/>of<sp/>the<sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>exchange<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a9a40fb9a96281a1c138c63fc8b5e35d9" kindref="member">process</ref>:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">Client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Server</highlight></codeline>
<codeline lineno="43"><highlight class="normal">------<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="44"><highlight class="normal">Generate<sp/>ephemeral<sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>pair.</highlight></codeline>
<codeline lineno="45"><highlight class="normal">SSH_MSG_KEX_ECDH_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verify<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/><ref refid="ssh__client_8c_1a0d3591711bd7d6cb03d42294115721bb" kindref="member">client</ref><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>is<sp/>32<sp/>bytes.</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>ephemeral<sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>pair.</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute<sp/>shared<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a96f3771c9ce4da5c403a696ad3065c14" kindref="member">secret</ref>.</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>and<sp/>sign<sp/>exchange<sp/>hash.</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;--------<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SSH_MSG_KEX_ECDH_REPLY</highlight></codeline>
<codeline lineno="52"><highlight class="normal">Verify<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a26896e674acdc47650fdef7a65b57886" kindref="member">that</ref><sp/>server<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>length<sp/>is<sp/>32<sp/>bytes.</highlight></codeline>
<codeline lineno="53"><highlight class="normal">*<sp/>Verify<sp/><ref refid="sshnetcat_8c_1a1c2046dcb30a629d6d9f45ff8f403f12" kindref="member">host</ref><sp/>keys<sp/>belong<sp/><ref refid="CMakeLists_8txt_1a76a1d017bd4c4089f326a74356e88edb" kindref="member">to</ref><sp/>server.</highlight></codeline>
<codeline lineno="54"><highlight class="normal">Compute<sp/>shared<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a96f3771c9ce4da5c403a696ad3065c14" kindref="member">secret</ref>.</highlight></codeline>
<codeline lineno="55"><highlight class="normal">Generate<sp/>exchange<sp/>hash.</highlight></codeline>
<codeline lineno="56"><highlight class="normal">Verify<sp/>server</highlight><highlight class="stringliteral">&apos;s<sp/>signature.</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral">*<sp/><sp/><sp/>Optional<sp/>but<sp/>strongly<sp/>recommanded<sp/>as<sp/>this<sp/>protects<sp/>against<sp/>MITM<sp/>attacks.</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral">This<sp/>is<sp/>implemented<sp/>using<sp/>the<sp/>same<sp/>messages<sp/>as<sp/>described<sp/>in<sp/>RFC5656<sp/>chapter<sp/>4</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">3.<sp/>Method<sp/>Name</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral">The<sp/>name<sp/>of<sp/>this<sp/>key<sp/>exchange<sp/>method<sp/>is<sp/>&quot;curve25519-sha256@libssh.org&quot;.</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral">4.<sp/>Implementation<sp/>considerations</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral">The<sp/>whole<sp/>method<sp/>is<sp/>based<sp/>on<sp/>the<sp/>curve25519<sp/>scalar<sp/>multiplication.<sp/>In<sp/>this</highlight></codeline>
<codeline lineno="69" refid="curve25519-sha256_0dlibssh_8org_8txt_1a6c4a12628159470391f1b922f86cc870" refkind="member"><highlight class="stringliteral">method,<sp/>a<sp/>private<sp/>key<sp/>is<sp/>a<sp/>scalar<sp/>of<sp/>256<sp/>bits,<sp/>and<sp/>a<sp/>public<sp/>key<sp/>is<sp/>a<sp/>point</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral">of<sp/>256<sp/>bits.</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral">4.1.<sp/>Private<sp/>key<sp/>generation</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74" refid="curve25519-sha256_0dlibssh_8org_8txt_1acf23df4cc7761ed915ae88187c7e028c" refkind="member"><highlight class="stringliteral">A<sp/>32<sp/>bytes<sp/>private<sp/>key<sp/>should<sp/>be<sp/>generated<sp/>for<sp/>each<sp/>new<sp/>connection,</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/>using<sp/>a<sp/>secure<sp/>PRNG.<sp/>The<sp/>following<sp/>actions<sp/>must<sp/>be<sp/>done<sp/>on<sp/>the<sp/>private<sp/>key:</highlight></codeline>
<codeline lineno="76" refid="curve25519-sha256_0dlibssh_8org_8txt_1a795ebdfa2bc5ee7767f222bd8af50e1b" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>mysecret[0]<sp/>&amp;=<sp/>248;</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>mysecret[31]<sp/>&amp;=<sp/>127;</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>mysecret[31]<sp/>|=<sp/>64;</highlight></codeline>
<codeline lineno="79" refid="curve25519-sha256_0dlibssh_8org_8txt_1a1500f35442f886be5f0770a08347a0b6" refkind="member"><highlight class="stringliteral">In<sp/>order<sp/>to<sp/>keep<sp/>the<sp/>key<sp/>valid.<sp/>However,<sp/>many<sp/>cryptographic<sp/>libraries<sp/>will<sp/>do</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral">this<sp/>automatically.</highlight></codeline>
<codeline lineno="81" refid="curve25519-sha256_0dlibssh_8org_8txt_1a16768bd19d94b703e4ae538d41815d24" refkind="member"><highlight class="stringliteral">It<sp/>should<sp/>be<sp/>noted<sp/>that,<sp/>in<sp/>opposition<sp/>to<sp/>NIST<sp/>curves,<sp/>no<sp/>special<sp/>validation</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral">should<sp/>be<sp/>done<sp/>to<sp/>ensure<sp/>the<sp/>result<sp/>is<sp/>a<sp/>valid<sp/>and<sp/>secure<sp/>private<sp/>key.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral">4.2<sp/>Public<sp/>key<sp/>generation</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral">The<sp/>32<sp/>bytes<sp/>public<sp/>key<sp/>of<sp/>either<sp/>a<sp/>client<sp/>or<sp/>a<sp/>server<sp/>must<sp/>be<sp/>generated<sp/>using</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">the<sp/>32<sp/>bytes<sp/>private<sp/>key<sp/>and<sp/>a<sp/>common<sp/>generator<sp/>base.<sp/>This<sp/>base<sp/>is<sp/>defined<sp/>as<sp/>9</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">followed<sp/>by<sp/>all<sp/>zeroes:</highlight></codeline>
<codeline lineno="89" refid="curve25519-sha256_0dlibssh_8org_8txt_1ab526bdf21603db5d6df24cbe34edc3d7" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>const<sp/>unsigned<sp/>char<sp/>basepoint[32]<sp/>=<sp/>{9};</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">The<sp/>public<sp/>key<sp/>is<sp/>calculated<sp/>using<sp/>the<sp/>cryptographic<sp/>scalar<sp/>multiplication:</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>const<sp/>unsigned<sp/>char<sp/>privkey[32];</highlight></codeline>
<codeline lineno="93" refid="curve25519-sha256_0dlibssh_8org_8txt_1a555595207a1407936ebb264ebdbf434c" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>pubkey[32];</highlight></codeline>
<codeline lineno="94" refid="curve25519-sha256_0dlibssh_8org_8txt_1a04d9d016559645d1eb244093532263e0" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>crypto_scalarmult<sp/>(pubkey,<sp/>privkey,<sp/>basepoint);</highlight></codeline>
<codeline lineno="95" refid="curve25519-sha256_0dlibssh_8org_8txt_1a7a7f57a53d58d3bb7fcdec4c55efa962" refkind="member"><highlight class="stringliteral">However<sp/>some<sp/>cryptographic<sp/>libraries<sp/>may<sp/>provide<sp/>a<sp/>combined<sp/>function:</highlight></codeline>
<codeline lineno="96" refid="curve25519-sha256_0dlibssh_8org_8txt_1a5d18fd02a76effa0a15b1decb554cc12" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>crypto_scalarmult_base<sp/>(pubkey,<sp/>privkey);</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral">It<sp/>should<sp/>be<sp/>noted<sp/>that,<sp/>in<sp/>opposition<sp/>to<sp/>NIST<sp/>curves,<sp/>no<sp/>special<sp/>validation</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">should<sp/>be<sp/>done<sp/>to<sp/>ensure<sp/>the<sp/>received<sp/>public<sp/>keys<sp/>are<sp/>valid<sp/>curves<sp/>point.<sp/>The</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">Curve25519<sp/>algorithm<sp/>ensure<sp/>that<sp/>every<sp/>possible<sp/>public<sp/>key<sp/>maps<sp/>to<sp/>a<sp/>valid</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral">ECC<sp/>Point.</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral">4.3<sp/>Shared<sp/>secret<sp/>generation</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="105" refid="curve25519-sha256_0dlibssh_8org_8txt_1a4c5b7e7f9974ccd012409eb6e21dc655" refkind="member"><highlight class="stringliteral">The<sp/>shared<sp/>secret,<sp/>k,<sp/>is<sp/>defined<sp/>in<sp/>SSH<sp/>specifications<sp/>to<sp/>be<sp/>a<sp/>big<sp/>integer.</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">This<sp/>number<sp/>is<sp/>calculated<sp/>using<sp/>the<sp/>following<sp/>procedure:</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>X<sp/>is<sp/>the<sp/>32<sp/>bytes<sp/>point<sp/>obtained<sp/>by<sp/>the<sp/>scalar<sp/>multiplication<sp/>of<sp/>the<sp/>other</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>side&apos;</highlight><highlight class="normal"><ref refid="test__socket_8c_1a73991beba1accdcc64730cb00c146fe2" kindref="member">s</ref><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>and<sp/>the<sp/>local<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="torture__crypto_8c_1a42363914b961236c71004e83b3b66a1b" kindref="member">key</ref><sp/>scalar.</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>The<sp/>whole<sp/>32<sp/>bytes<sp/>of<sp/>the<sp/>number<sp/>X<sp/>are<sp/>then<sp/>converted<sp/>into<sp/><ref refid="namespacegenerate_1a3bb1e673073a90dc0b8d1659852706e3" kindref="member">a</ref><sp/>big<sp/>integer<sp/><ref refid="curve25519-sha256_0dlibssh_8org_8txt_1a4c5b7e7f9974ccd012409eb6e21dc655" kindref="member">k</ref>.</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>This<sp/>conversion<sp/>follows<sp/>the<sp/>network<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>order.<sp/>This<sp/>step<sp/>differs<sp/>from<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>RFC5656.</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">[RFC5656]<sp/><sp/><sp/><sp/>https:</highlight><highlight class="comment">//tools.ietf.org/html/rfc5656</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">[SCHNEIER]<sp/><sp/><sp/>https:</highlight><highlight class="comment">//www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html#c1675929</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">[DJB]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https:</highlight><highlight class="comment">//cr.yp.to/talks/2013.05.31/slides-dan+tanja-20130531-4x3.pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">[Curve25519]<sp/></highlight><highlight class="stringliteral">&quot;Curve25519:<sp/>new<sp/>Diffie-Hellman<sp/>speed<sp/>records.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https:</highlight><highlight class="comment">//cr.yp.to/ecdh/curve25519-20060209.pdf</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="doc/curve25519-sha256@libssh.org.txt"/>
  </compounddef>
</doxygen>
