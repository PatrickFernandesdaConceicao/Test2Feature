<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libssh_tutor_forwarding" kind="page">
    <compoundname>libssh_tutor_forwarding</compoundname>
    <title>Chapter 7: Forwarding connections (tunnel)</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="libssh_tutor_forwarding_1forwarding_connections">
<title>Forwarding connections</title>
<para>Port forwarding comes in SSH protocol in two different flavours: direct or reverse port forwarding. Direct port forwarding is also named local port forwarding, and reverse port forwarding is also called remote port forwarding. SSH also allows X11 tunnels.</para>
<sect2 id="libssh_tutor_forwarding_1forwarding_direct">
<title>Direct port forwarding</title>
<para>Direct port forwarding is from client to server. The client opens a tunnel, and forwards whatever data to the server. Then, the server connects to an end point. The end point can reside on another machine or on the SSH server itself.</para>
<para>Example of use of direct port forwarding: <verbatim>Mail client application   Google Mail
         |                    ^
     5555 (arbitrary)         |
         |                143 (IMAP2)
         V                    |
    SSH client   =====&gt;   SSH server

Legend:
--P--&gt;: port connections through port P
=====&gt;: SSH tunnel
</verbatim> A mail client connects to port 5555 of a client. An encrypted tunnel is established to the server. The server connects to port 143 of Google Mail (the end point). Now the local mail client can retrieve mail.</para>
</sect2>
<sect2 id="libssh_tutor_forwarding_1forwarding_reverse">
<title>Reverse port forwarding</title>
<para>The reverse forwarding is slightly different. It goes from server to client, even though the client has the initiative of establishing the tunnel. Once the tunnel is established, the server will listen on a port. Whenever a connection to this port is made, the server forwards the data to the client.</para>
<para>Example of use of reverse port forwarding: <verbatim> Local mail server    Mail client application
         ^                     |
         |               5555 (arbitrary)
     143 (IMAP2)               |
         |                     V
    SSH client   &lt;=====   SSH server

Legend:
--P--&gt;: port connections through port P
=====&gt;: SSH tunnel
</verbatim> In this example, the SSH client establishes the tunnel, but it is used to forward the connections established at the server to the client.</para>
</sect2>
<sect2 id="libssh_tutor_forwarding_1forwarding_x11">
<title>X11 tunnels</title>
<para>X11 tunnels allow a remote application to display locally.</para>
<para>Example of use of X11 tunnels: <verbatim>   Local display     Graphical application
   (X11 server)          (X11 client)
         ^                     |
         |                     V
    SSH client   &lt;=====   SSH server

Legend:
-----&gt;: X11 connection through X11 display number
=====&gt;: SSH tunnel
</verbatim> The SSH tunnel is established by the client.</para>
<para>How to establish X11 tunnels with libssh has already been described in this tutorial.</para>
<para><simplesect kind="see"><para>x11</para>
</simplesect>
</para>
</sect2>
<sect2 id="libssh_tutor_forwarding_1libssh_direct">
<title>Doing direct port forwarding with libssh</title>
<para>To do direct port forwarding, call function <ref refid="group__libssh__channel_1gae86b0704a1f2bdebb268b55567f7f47b" kindref="member">ssh_channel_open_forward()</ref>:<itemizedlist>
<listitem><para>you need a separate channel for the tunnel as first parameter;</para>
</listitem><listitem><para>second and third parameters are the remote endpoint;</para>
</listitem><listitem><para>fourth and fifth parameters are sent to the remote server so that they can be logged on that server.</para>
</listitem></itemizedlist>
</para>
<para>If you don&apos;t plan to forward the data you will receive to any local port, just put fake values like &quot;localhost&quot; and 5555 as your local host and port.</para>
<para>The example below shows how to open a direct channel that would be used to retrieve google&apos;s home page from the remote SSH server.</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>direct_forwarding(ssh_session<sp/>session)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel<sp/>forwarding_channel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>*http_get<sp/>=<sp/>&quot;GET<sp/>/<sp/>HTTP/1.1\nHost:<sp/>www.google.com\n\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>nbytes,<sp/>nwritten;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>forwarding_channel<sp/>=<sp/>ssh_channel_new(session);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(forwarding_channel<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_open_forward(forwarding_channel,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;www.google.com&quot;,<sp/>80,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;localhost&quot;,<sp/>5555);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel_free(forwarding_channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>nbytes<sp/>=<sp/>strlen(http_get);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nwritten<sp/>=<sp/>ssh_channel_write(forwarding_channel,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_get,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nbytes<sp/>!=<sp/>nwritten)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel_free(forwarding_channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_free(forwarding_channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>SSH_OK;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The data sent by Google can be retrieved for example with <ref refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" kindref="member">ssh_select()</ref> and <ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref>. Goggle&apos;s home page can then be displayed on the local SSH client, saved into a local file, made available on a local port, or whatever use you have for it.</para>
</sect2>
<sect2 id="libssh_tutor_forwarding_1libssh_reverse">
<title>Doing reverse port forwarding with libssh</title>
<para>To do reverse port forwarding, call <ref refid="group__libssh__channel_1ga758cda957227751870c8772df46e5b39" kindref="member">ssh_channel_listen_forward()</ref>, then <ref refid="group__libssh__channel_1ga490e4b0a7adc022507b7f165b336afe4" kindref="member">ssh_channel_accept_forward()</ref>.</para>
<para>When you call <ref refid="group__libssh__channel_1ga758cda957227751870c8772df46e5b39" kindref="member">ssh_channel_listen_forward()</ref>, you can let the remote server chose the non-privileged port it should listen to. Otherwise, you can chose your own privileged or non-privileged port. Beware that you should have administrative privileges on the remote server to open a privileged port (port number &lt; 1024).</para>
<para>Below is an example of a very rough web server waiting for connections on port 8080 of remote SSH server. The incoming connections are passed to the local libssh application, which handles them:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>web_server(ssh_session<sp/>session)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel<sp/>channel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>buffer[256];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>nbytes,<sp/>nwritten;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>port<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>*helloworld<sp/>=<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;HTTP/1.1<sp/>200<sp/>OK\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Content-Type:<sp/>text/html\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Content-Length:<sp/>113\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;&lt;html&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;<sp/><sp/>&lt;head&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;<sp/><sp/><sp/><sp/>&lt;title&gt;Hello,<sp/>World!&lt;/title&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;<sp/><sp/>&lt;/head&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;<sp/><sp/>&lt;body&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;<sp/><sp/><sp/><sp/>&lt;h1&gt;Hello,<sp/>World!&lt;/h1&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;<sp/><sp/>&lt;/body&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;&lt;/html&gt;\n&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_listen_forward(session,<sp/>NULL,<sp/>8080,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Error<sp/>opening<sp/>remote<sp/>port:<sp/>%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssh_get_error(session));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>channel<sp/>=<sp/>ssh_channel_accept_forward(session,<sp/>60000,<sp/>&amp;port);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(channel<sp/>==<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Error<sp/>waiting<sp/>for<sp/>incoming<sp/>connection:<sp/>%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssh_get_error(session));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>ssh_channel_read(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Error<sp/>reading<sp/>incoming<sp/>data:<sp/>%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssh_get_error(session));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssh_channel_send_eof(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(strncmp(buffer,<sp/>&quot;GET<sp/>/&quot;,<sp/>5))<sp/>continue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>strlen(helloworld);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nwritten<sp/>=<sp/>ssh_channel_write(channel,<sp/>helloworld,<sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nwritten<sp/>!=<sp/>nbytes)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Error<sp/>sending<sp/>answer:<sp/>%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssh_get_error(session));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssh_channel_send_eof(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sent<sp/>answer\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_send_eof(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>SSH_OK;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doc/forwarding.dox"/>
  </compounddef>
</doxygen>
