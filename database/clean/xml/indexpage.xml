<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>My Project</title>
    <innerpage refid="libssh_linking">The Linking HowTo</innerpage>
    <innerpage refid="libssh_tutorial">The Tutorial</innerpage>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the online reference for developing with the libssh library. It documents the libssh C API and the C++ wrapper.</para>
<sect1 id="index_1main-linking">
<title>Linking</title>
<para>We created a small howto how to link libssh against your application, read <ref refid="libssh_linking" kindref="compound">The Linking HowTo</ref>.</para>
</sect1>
<sect1 id="index_1main-tutorial">
<title>Tutorial</title>
<para>You should start by reading <ref refid="libssh_tutorial" kindref="compound">The Tutorial</ref>, then reading the documentation of the interesting functions as you go.</para>
</sect1>
<sect1 id="index_1main-features">
<title>Features</title>
<para>The libssh library provides:</para>
<para><itemizedlist>
<listitem><para><bold>Key Exchange Methods</bold>: <emphasis>curve25519-sha256, <ulink url="mailto:curve25519-sha256@libssh.org">curve25519-sha256@libssh.org</ulink>, ecdh-sha2-nistp256, ecdh-sha2-nistp384, ecdh-sha2-nistp521</emphasis>, diffie-hellman-group1-sha1, diffie-hellman-group14-sha1</para>
</listitem><listitem><para><bold>Public Key Algorithms</bold>: ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521, ssh-rsa, rsa-sha2-512, rsa-sha2-256,ssh-dss</para>
</listitem><listitem><para><bold>Ciphers</bold>: <emphasis>aes256-ctr, aes192-ctr, aes128-ctr</emphasis>, aes256-cbc (<ulink url="mailto:rijndael-cbc@lysator.liu.se">rijndael-cbc@lysator.liu.se</ulink>), aes192-cbc, aes128-cbc, 3des-cbc, blowfish-cbc, none</para>
</listitem><listitem><para><bold>Compression Schemes</bold>: zlib, <emphasis><ulink url="mailto:zlib@openssh.com">zlib@openssh.com</ulink></emphasis>, none</para>
</listitem><listitem><para><bold>MAC hashes</bold>: hmac-sha1, hmac-sha2-256, hmac-sha2-512, hmac-md5, none</para>
</listitem><listitem><para><bold>Authentication</bold>: none, password, public-key, keyboard-interactive, <emphasis>gssapi-with-mic</emphasis></para>
</listitem><listitem><para><bold>Channels</bold>: shell, exec (incl. SCP wrapper), direct-tcpip, subsystem, <emphasis><ulink url="mailto:auth-agent-req@openssh.com">auth-agent-req@openssh.com</ulink></emphasis></para>
</listitem><listitem><para><bold>Global Requests</bold>: tcpip-forward, forwarded-tcpip</para>
</listitem><listitem><para><bold>Channel Requests</bold>: x11, pty, <emphasis>exit-status, signal, exit-signal, <ulink url="mailto:keepalive@openssh.com">keepalive@openssh.com</ulink>, <ulink url="mailto:auth-agent-req@openssh.com">auth-agent-req@openssh.com</ulink></emphasis></para>
</listitem><listitem><para><bold>Subsystems</bold>: sftp(version 3), <emphasis>OpenSSH Extensions</emphasis></para>
</listitem><listitem><para><bold>SFTP</bold>: <emphasis><ulink url="mailto:statvfs@openssh.com">statvfs@openssh.com</ulink>, <ulink url="mailto:fstatvfs@openssh.com">fstatvfs@openssh.com</ulink></emphasis></para>
</listitem><listitem><para><bold>Thread-safe</bold>: Just don&apos;t share sessions</para>
</listitem><listitem><para><bold>Non-blocking</bold>: it can be used both blocking and non-blocking</para>
</listitem><listitem><para><bold>Your sockets</bold>: the app hands over the socket, or uses libssh sockets</para>
</listitem><listitem><para><bold>OpenSSL</bold> or <bold>gcrypt</bold>: builds with either</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1main-additional-features">
<title>Additional Features</title>
<para><itemizedlist>
<listitem><para>Client <bold>and</bold> server support</para>
</listitem><listitem><para>SSHv2 and SSHv1 protocol support</para>
</listitem><listitem><para>Supports <ulink url="https://test.libssh.org/">Linux, UNIX, BSD, Solaris, OS/2 and Windows</ulink></para>
</listitem><listitem><para>Automated test cases with nightly <ulink url="https://test.libssh.org/">tests</ulink></para>
</listitem><listitem><para>Event model based on poll(2), or a poll(2)-emulation.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1main-copyright">
<title>Copyright Policy</title>
<para>libssh is a project with distributed copyright ownership, which means we prefer the copyright on parts of libssh to be held by individuals rather than corporations if possible. There are historical legal reasons for this, but one of the best ways to explain it is that it’s much easier to work with individuals who have ownership than corporate legal departments if we ever need to make reasonable compromises with people using and working with libssh.</para>
<para>We track the ownership of every part of libssh via git, our source code control system, so we know the provenance of every piece of code that is committed to libssh.</para>
<para>So if possible, if you’re doing libssh changes on behalf of a company who normally owns all the work you do please get them to assign personal copyright ownership of your changes to you as an individual, that makes things very easy for us to work with and avoids bringing corporate legal departments into the picture.</para>
<para>If you can’t do this we can still accept patches from you owned by your employer under a standard employment contract with corporate copyright ownership. It just requires a simple set-up process first.</para>
<para>We use a process very similar to the way things are done in the Linux Kernel community, so it should be very easy to get a sign off from your corporate legal department. The only changes we’ve made are to accommodate the license we use, which is LGPLv2 (or later) whereas the Linux kernel uses GPLv2.</para>
<para>The process is called signing.</para>
<sect2 id="index_1autotoc_md0">
<title>How to sign your work</title>
<para>Once you have permission to contribute to libssh from your employer, simply email a copy of the following text from your corporate email address to:</para>
<para><ulink url="mailto:contributing@libssh.org">contributing@libssh.org</ulink></para>
<para><verbatim>libssh Developer&apos;s Certificate of Origin. Version 1.0

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the appropriate
    version of the GNU General Public License; or

(b) The contribution is based upon previous work that, to the best of
    my knowledge, is covered under an appropriate open source license
    and I have the right under that license to submit that work with
    modifications, whether created in whole or in part by me, under
    the GNU General Public License, in the appropriate version; or

(c) The contribution was provided directly to me by some other
    person who certified (a) or (b) and I have not modified it.

(d) I understand and agree that this project and the contribution are
    public and that a record of the contribution (including all
    metadata and personal information I submit with it, including my
    sign-off) is maintained indefinitely and may be redistributed
    consistent with the libssh Team&apos;s policies and the requirements of
    the GNU GPL where they are relevant.

(e) I am granting this work to this project under the terms of the
    GNU Lesser General Public License as published by the
    Free Software Foundation; either version 2.1 of
    the License, or (at the option of the project) any later version.

https://www.gnu.org/licenses/lgpl-2.1.html
</verbatim></para>
<para>We will maintain a copy of that email as a record that you have the rights to contribute code to libssh under the required licenses whilst working for the company where the email came from.</para>
<para>Then when sending in a patch via the normal mechanisms described above, add a line that states:</para>
<para><verbatim>   Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;
</verbatim></para>
<para>using your real name and the email address you sent the original email you used to send the libssh Developer’s Certificate of Origin to us (sorry, no pseudonyms or anonymous contributions.)</para>
<para>That’s it! Such code can then quite happily contain changes that have copyright messages such as:</para>
<para><verbatim>   (c) Example Corporation.
</verbatim></para>
<para>and can be merged into the libssh codebase in the same way as patches from any other individual. You don’t need to send in a copy of the libssh Developer’s Certificate of Origin for each patch, or inside each patch. Just the sign-off message is all that is required once we’ve received the initial email.</para>
<para>Have fun and happy libssh hacking!</para>
<para>The libssh Team</para>
</sect2>
</sect1>
<sect1 id="index_1main-rfc">
<title>Internet standard</title>
<sect2 id="index_1main-rfc-secsh">
<title>Secure Shell (SSH)</title>
<para>The following RFC documents described SSH-2 protcol as an Internet standard.</para>
<para><itemizedlist>
<listitem><para><ulink url="https://tools.ietf.org/html/rfc4250">RFC 4250</ulink>, The Secure Shell (SSH) Protocol Assigned Numbers</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4251">RFC 4251</ulink>, The Secure Shell (SSH) Protocol Architecture</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4252">RFC 4252</ulink>, The Secure Shell (SSH) Authentication Protocol</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4253">RFC 4253</ulink>, The Secure Shell (SSH) Transport Layer Protocol</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4254">RFC 4254</ulink>, The Secure Shell (SSH) Connection Protocol</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4255">RFC 4255</ulink>, Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints (not implemented in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4256">RFC 4256</ulink>, Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4335">RFC 4335</ulink>, The Secure Shell (SSH) Session Channel Break Extension</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4344">RFC 4344</ulink>, The Secure Shell (SSH) Transport Layer Encryption Modes</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4345">RFC 4345</ulink>, Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol</para>
</listitem></itemizedlist>
</para>
<para>It was later modified and expanded by the following RFCs.</para>
<para><itemizedlist>
<listitem><para><ulink url="https://tools.ietf.org/html/rfc4419">RFC 4419</ulink>, Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4432">RFC 4432</ulink>, RSA Key Exchange for the Secure Shell (SSH) Transport Layer Protocol (not implemented in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4462">RFC 4462</ulink>, Generic Security Service Application Program Interface (GSS-API) Authentication and Key Exchange for the Secure Shell (SSH) Protocol (only the authentication implemented in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc4716">RFC 4716</ulink>, The Secure Shell (SSH) Public Key File Format (not implemented in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc5647">RFC 5647</ulink>, AES Galois Counter Mode for the Secure Shell Transport Layer Protocol (the algorithm negotiation implemented according to openssh.com)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc5656">RFC 5656</ulink>, Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc6594">RFC 6594</ulink>, Use of the SHA-256 Algorithm with RSA, DSA, and ECDSA in SSHFP Resource Records (not implemented in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc6668">RFC 6668</ulink>, SHA-2 Data Integrity Verification for the Secure Shell (SSH) Transport Layer Protocol</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc7479">RFC 7479</ulink>, Using Ed25519 in SSHFP Resource Records (not implemented in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc8160">RFC 8160</ulink>, IUTF8 Terminal Mode in Secure Shell (SSH) (not handled in libssh)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc8270">RFC 8270</ulink>, Increase the Secure Shell Minimum Recommended Diffie-Hellman Modulus Size to 2048 Bits</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc8308">RFC 8308</ulink>, Extension Negotiation in the Secure Shell (SSH) Protocol (only the &quot;server-sig-algs&quot; extension implemented)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc8332">RFC 8332</ulink>, Use of RSA Keys with SHA-256 and SHA-512 in the Secure Shell (SSH) Protocol</para>
</listitem></itemizedlist>
</para>
<para>There are also drafts that are being currently developed and followed.</para>
<para><itemizedlist>
<listitem><para><ulink url="https://tools.ietf.org/html/draft-ietf-curdle-ssh-kex-sha2-10">draft-ietf-curdle-ssh-kex-sha2-10</ulink> Key Exchange (KEX) Method Updates and Recommendations for Secure Shell (SSH)</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/draft-miller-ssh-agent-03">draft-miller-ssh-agent-03</ulink> SSH Agent Protocol</para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/draft-ietf-curdle-ssh-curves-12">draft-ietf-curdle-ssh-curves-12</ulink> Secure Shell (SSH) Key Exchange Method using Curve25519 and Curve448</para>
</listitem></itemizedlist>
</para>
<para>Interesting cryptography documents:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://www.cryptsoft.com/pkcs11doc/">PKCS #11</ulink>, PKCS #11 reference documents, describing interface with smartcards.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1main-rfc-sftp">
<title>Secure Shell File Transfer Protocol (SFTP)</title>
<para>The protocol is not an Internet standard but it is still widely implemented. OpenSSH and most other implementation implement Version 3 of the protocol. We do the same in libssh.</para>
<para><itemizedlist>
<listitem><para><ulink url="https://tools.ietf.org/html/draft-ietf-secsh-filexfer-02">draft-ietf-secsh-filexfer-02.txt</ulink>, SSH File Transfer Protocol</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1main-rfc-extensions">
<title>Secure Shell Extensions</title>
<para>The OpenSSH project has defined some extensions to the protocol. We support some of them like the statvfs calls in SFTP or the ssh-agent.</para>
<para><itemizedlist>
<listitem><para><ulink url="https://api.libssh.org/rfc/PROTOCOL">OpenSSH&apos;s deviations and extensions</ulink></para>
</listitem><listitem><para><ulink url="https://api.libssh.org/rfc/PROTOCOL.certkeys">OpenSSH&apos;s pubkey certificate authentication</ulink></para>
</listitem><listitem><para><ulink url="https://api.libssh.org/rfc/PROTOCOL.chacha20poly1305">chacha20-poly1305@openssh.com authenticated encryption mode</ulink></para>
</listitem><listitem><para><ulink url="https://api.libssh.org/rfc/PROTOCOL.key">OpenSSH private key format (openssh-key-v1)</ulink> </para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doc/mainpage.dox"/>
  </compounddef>
</doxygen>
