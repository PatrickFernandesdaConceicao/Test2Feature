<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libssh_tutor_command" kind="page">
    <compoundname>libssh_tutor_command</compoundname>
    <title>Chapter 4: Passing a remote command</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="libssh_tutor_command_1remote_command">
<title>Passing a remote command</title>
<para>Previous chapter has shown how to open a full shell session, with an attached terminal or not. If you only need to execute a command on the remote end, you don&apos;t need all that complexity.</para>
<para>The method described here is suited for executing only one remote command. If you need to issue several commands in a row, you should consider using a non-interactive remote shell, as explained in previous chapter.</para>
<para><simplesect kind="see"><para><ref refid="ssh__client_8c_1a9aee67bdbbcaaca080f23c622d7d38d9" kindref="member">shell</ref></para>
</simplesect>
</para>
<sect2 id="libssh_tutor_command_1exec_remote">
<title>Executing a remote command</title>
<para>The first steps for executing a remote command are identical to those for opening remote shells. You first need a SSH channel, and then a SSH session that uses this channel:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>show_remote_files(ssh_session<sp/>session)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel<sp/>channel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>channel<sp/>=<sp/>ssh_channel_new(session);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(channel<sp/>==<sp/>NULL)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_open_session(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
</programlisting></para>
<para>Once a session is open, you can start the remote command with <ref refid="group__libssh__channel_1ga567d509183ade0a77190f390e2b5747d" kindref="member">ssh_channel_request_exec()</ref>:</para>
<para><programlisting><codeline><highlight class="normal">rc<sp/>=<sp/>ssh_channel_request_exec(channel,<sp/>&quot;ls<sp/>-l&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(rc<sp/>!=<sp/>SSH_OK)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_close(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If the remote command displays data, you get them with <ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref>. This function returns the number of bytes read. If there is no more data to read on the channel, this function returns 0, and you can go to next step. If an error has been encountered, it returns a negative value:</para>
<para><programlisting><codeline><highlight class="normal">char<sp/>buffer[256];</highlight></codeline>
<codeline><highlight class="normal">int<sp/>nbytes;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">nbytes<sp/>=<sp/>ssh_channel_read(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(nbytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(fwrite(buffer,<sp/>1,<sp/>nbytes,<sp/>stdout)<sp/>!=<sp/>nbytes)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel_close(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nbytes<sp/>=<sp/>ssh_channel_read(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(nbytes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_close(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Once you read the result of the remote command, you send an end-of-file to the channel, close it, and free the memory that it used:</para>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/>ssh_channel_send_eof(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_close(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>SSH_OK;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doc/command.dox"/>
  </compounddef>
</doxygen>
