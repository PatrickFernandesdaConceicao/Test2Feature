<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libssh_tutor_shell" kind="page">
    <compoundname>libssh_tutor_shell</compoundname>
    <title>Chapter 3: Opening a remote shell</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="libssh_tutor_shell_1opening_shell">
<title>Opening a remote shell</title>
<para>We already mentioned that a single SSH connection can be shared between several &quot;channels&quot;. Channels can be used for different purposes.</para>
<para>This chapter shows how to open one of these channels, and how to use it to start a command interpreter on a remote computer.</para>
<sect2 id="libssh_tutor_shell_1open_channel">
<title>Opening and closing a channel</title>
<para>The <ref refid="group__libssh__channel_1gada8ccda7bf65165fe145d3096a252dcc" kindref="member">ssh_channel_new()</ref> function creates a channel. It returns the channel as a variable of type ssh_channel.</para>
<para>Once you have this channel, you open a SSH session that uses it with <ref refid="group__libssh__channel_1gaf051dd30d75bf6dc45d1a5088cf970bd" kindref="member">ssh_channel_open_session()</ref>.</para>
<para>Once you don&apos;t need the channel anymore, you can send an end-of-file to it with <ref refid="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" kindref="member">ssh_channel_close()</ref>. At this point, you can destroy the channel with <ref refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" kindref="member">ssh_channel_free()</ref>.</para>
<para>The code sample below achieves these tasks:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>shell_session(ssh_session<sp/>session)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel<sp/>channel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>channel<sp/>=<sp/>ssh_channel_new(session);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(channel<sp/>==<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_open_session(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_close(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_send_eof(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel_free(channel);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>SSH_OK;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="libssh_tutor_shell_1interactive">
<title>Interactive and non-interactive sessions</title>
<para>A &quot;shell&quot; is a command interpreter. It is said to be &quot;interactive&quot; if there is a human user typing the commands, one after the other. The contrary, a non-interactive shell, is similar to the execution of commands in the background: there is no attached terminal.</para>
<para>If you plan using an interactive shell, you need to create a pseud-terminal on the remote side. A remote terminal is usually referred to as a &quot;pty&quot;, for &quot;pseudo-teletype&quot;. The remote processes won&apos;t see the difference with a real text-oriented terminal.</para>
<para>If needed, you request the pty with the function <ref refid="group__libssh__channel_1ga37c1cec33fe5a2f184768aba52e3a0db" kindref="member">ssh_channel_request_pty()</ref>. Then you define its dimensions (number of rows and columns) with <ref refid="group__libssh__channel_1gaf5d55c90f3d98c583df23d21905c1127" kindref="member">ssh_channel_change_pty_size()</ref>.</para>
<para>Be your session interactive or not, the next step is to request a shell with <ref refid="group__libssh__channel_1gaed4c5fb30c9df2b2548421ccf4e81bf1" kindref="member">ssh_channel_request_shell()</ref>.</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>interactive_shell_session(ssh_channel<sp/>channel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_pty(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_change_pty_size(channel,<sp/>80,<sp/>24);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_shell(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="libssh_tutor_shell_1read_data">
<title>Displaying the data sent by the remote computer</title>
<para>In your program, you will usually need to receive all the data &quot;displayed&quot; into the remote pty. You will usually analyse, log, or display this data.</para>
<para><ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref> and <ref refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" kindref="member">ssh_channel_read_nonblocking()</ref> are the simplest way to read data from a channel. If you only need to read from a single channel, they should be enough.</para>
<para>The example below shows how to wait for remote data using <ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref>:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>interactive_shell_session(ssh_channel<sp/>channel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>buffer[256];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>nbytes;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_pty(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_change_pty_size(channel,<sp/>80,<sp/>24);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_shell(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(ssh_channel_is_open(channel)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!ssh_channel_is_eof(channel))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>ssh_channel_read(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write(1,<sp/>buffer,<sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Unlike <ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref>, <ref refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" kindref="member">ssh_channel_read_nonblocking()</ref> never waits for remote data to be ready. It returns immediately.</para>
<para>If you plan to use <ref refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" kindref="member">ssh_channel_read_nonblocking()</ref> repeatedly in a loop, you should use a &quot;passive wait&quot; function like usleep(3) in the same loop. Otherwise, your program will consume all the CPU time, and your computer might become unresponsive.</para>
</sect2>
<sect2 id="libssh_tutor_shell_1write_data">
<title>Sending user input to the remote computer</title>
<para>User&apos;s input is sent to the remote site with <ref refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" kindref="member">ssh_channel_write()</ref>.</para>
<para>The following example shows how to combine a nonblocking read from a SSH channel with a nonblocking read from the keyboard. The local input is then sent to the remote computer:</para>
<para><programlisting><codeline><highlight class="normal">/*<sp/>Under<sp/>Linux,<sp/>this<sp/>function<sp/>determines<sp/>whether<sp/>a<sp/>key<sp/>has<sp/>been<sp/>pressed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Under<sp/>Windows,<sp/>it<sp/>is<sp/>a<sp/>standard<sp/>function,<sp/>so<sp/>you<sp/>need<sp/>not<sp/>redefine<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline><highlight class="normal">int<sp/>kbhit()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>timeval<sp/>tv<sp/>=<sp/>{<sp/>0L,<sp/>0L<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fd_set<sp/>fds;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FD_SET(0,<sp/>&amp;fds);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>select(1,<sp/>&amp;fds,<sp/>NULL,<sp/>NULL,<sp/>&amp;tv);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*<sp/>A<sp/>very<sp/>simple<sp/>terminal<sp/>emulator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>print<sp/>data<sp/>received<sp/>from<sp/>the<sp/>remote<sp/>computer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-<sp/>send<sp/>keyboard<sp/>input<sp/>to<sp/>the<sp/>remote<sp/>computer</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline><highlight class="normal">int<sp/>interactive_shell_session(ssh_channel<sp/>channel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Session<sp/>and<sp/>terminal<sp/>initialization<sp/>skipped<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>buffer[256];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>nbytes,<sp/>nwritten;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(ssh_channel_is_open(channel)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!ssh_channel_is_eof(channel))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>ssh_channel_read_nonblocking(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&lt;<sp/>0)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nwritten<sp/>=<sp/>write(1,<sp/>buffer,<sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nwritten<sp/>!=<sp/>nbytes)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!kbhit())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usleep(50000L);<sp/>//<sp/>0.05<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>read(0,<sp/>buffer,<sp/>sizeof(buffer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&lt;<sp/>0)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nwritten<sp/>=<sp/>ssh_channel_write(channel,<sp/>buffer,<sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nwritten<sp/>!=<sp/>nbytes)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Of course, this is a poor terminal emulator, since the echo from the keys pressed should not be done locally, but should be done by the remote side. Also, user&apos;s input should not be sent once &quot;Enter&quot; key is pressed, but immediately after each key is pressed. This can be accomplished by setting the local terminal to &quot;raw&quot; mode with the cfmakeraw(3) function. <ref refid="ssh__client_8c_1a2edb85f17bd5713ff4cef46c6644e100" kindref="member">cfmakeraw()</ref> is a standard function under Linux, on other systems you can recode it with:</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>void<sp/>cfmakeraw(struct<sp/>termios<sp/>*termios_p)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>termios_p-&gt;c_iflag<sp/>&amp;=<sp/>~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL|IXON);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>termios_p-&gt;c_oflag<sp/>&amp;=<sp/>~OPOST;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>termios_p-&gt;c_lflag<sp/>&amp;=<sp/>~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>termios_p-&gt;c_cflag<sp/>&amp;=<sp/>~(CSIZE|PARENB);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>termios_p-&gt;c_cflag<sp/>|=<sp/>CS8;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If you are not using a local terminal, but some kind of graphical environment, the solution to this kind of &quot;echo&quot; problems will be different.</para>
</sect2>
<sect2 id="libssh_tutor_shell_1select_loop">
<title>A more elaborate way to get the remote data</title>
<para><verbatim>Warning: ssh_select() and ssh_channel_select() are not relevant anymore,
since libssh is about to provide an easier system for asynchronous
communications. This subsection should be removed then. ***
</verbatim> <ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref> and <ref refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" kindref="member">ssh_channel_read_nonblocking()</ref> functions are simple, but they are not adapted when you expect data from more than one SSH channel, or from other file descriptors. Last example showed how getting data from the standard input (the keyboard) at the same time as data from the SSH channel was complicated. The functions <ref refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" kindref="member">ssh_select()</ref> and <ref refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" kindref="member">ssh_channel_select()</ref> provide a more elegant way to wait for data coming from many sources.</para>
<para>The functions <ref refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" kindref="member">ssh_select()</ref> and <ref refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" kindref="member">ssh_channel_select()</ref> remind of the standard UNIX select(2) function. The idea is to wait for &quot;something&quot; to happen: incoming data to be read, outgoing data to block, or an exception to occur. Both these functions do a &quot;passive wait&quot;, i.e. you can safely use them repeatedly in a loop, it will not consume exaggerate processor time and make your computer unresponsive. It is quite common to use these functions in your application&apos;s main loop.</para>
<para>The difference between <ref refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" kindref="member">ssh_select()</ref> and <ref refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" kindref="member">ssh_channel_select()</ref> is that <ref refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" kindref="member">ssh_channel_select()</ref> is simpler, but allows you only to watch SSH channels. <ref refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" kindref="member">ssh_select()</ref> is more complete and enables watching regular file descriptors as well, in the same function call.</para>
<para>Below is an example of a function that waits both for remote SSH data to come, as well as standard input from the keyboard:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>interactive_shell_session(ssh_session<sp/>session,<sp/>ssh_channel<sp/>channel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Session<sp/>and<sp/>terminal<sp/>initialization<sp/>skipped<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>buffer[256];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>nbytes,<sp/>nwritten;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(ssh_channel_is_open(channel)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!ssh_channel_is_eof(channel))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>timeval<sp/>timeout;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_channel<sp/>in_channels[2],<sp/>out_channels[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fd_set<sp/>fds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>maxfd;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeout.tv_sec<sp/>=<sp/>30;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeout.tv_usec<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>in_channels[0]<sp/>=<sp/>channel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>in_channels[1]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FD_SET(0,<sp/>&amp;fds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FD_SET(ssh_get_fd(session),<sp/>&amp;fds);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>maxfd<sp/>=<sp/>ssh_get_fd(session)<sp/>+<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ssh_select(in_channels,<sp/>out_channels,<sp/>maxfd,<sp/>&amp;fds,<sp/>&amp;timeout);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(out_channels[0]<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>ssh_channel_read(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&lt;<sp/>0)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nwritten<sp/>=<sp/>write(1,<sp/>buffer,<sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nwritten<sp/>!=<sp/>nbytes)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(FD_ISSET(0,<sp/>&amp;fds))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nbytes<sp/>=<sp/>read(0,<sp/>buffer,<sp/>sizeof(buffer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&lt;<sp/>0)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nwritten<sp/>=<sp/>ssh_channel_write(channel,<sp/>buffer,<sp/>nbytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nbytes<sp/>!=<sp/>nwritten)<sp/>return<sp/>SSH_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="libssh_tutor_shell_1x11">
<title>Using graphical applications on the remote side</title>
<para>If your remote application is graphical, you can forward the X11 protocol to your local computer.</para>
<para>To do that, you first declare that you accept X11 connections with <ref refid="group__libssh__channel_1ga548bd0f77a50b7c8180942544b375866" kindref="member">ssh_channel_accept_x11()</ref>. Then you create the forwarding tunnel for the X11 protocol with <ref refid="group__libssh__channel_1gadfa34624c28164bd73453cd04aa64c1f" kindref="member">ssh_channel_request_x11()</ref>.</para>
<para>The following code performs channel initialization and shell session opening, and handles a parallel X11 connection:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>interactive_shell_session(ssh_channel<sp/>channel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ssh_channel<sp/>x11channel;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_pty(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_change_pty_size(channel,<sp/>80,<sp/>24);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_x11(channel,<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>ssh_channel_request_shell(channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>SSH_OK)<sp/>return<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Read<sp/>the<sp/>data<sp/>sent<sp/>by<sp/>the<sp/>remote<sp/>computer<sp/>here<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Don&apos;t forget to set the $DISPLAY environment variable on the remote side, or the remote applications won&apos;t try using the X11 tunnel:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>export<sp/>DISPLAY=:0</highlight></codeline>
<codeline><highlight class="normal">$<sp/>xclock<sp/>&amp;</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doc/shell.dox"/>
  </compounddef>
</doxygen>
